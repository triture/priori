// Generated by Haxe 4.3.1
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var priori_event_PriEventDispatcher = function() {
	this._isKilled = false;
	this.___edl = [];
	this.___ede = [];
};
priori_event_PriEventDispatcher.__name__ = "priori.event.PriEventDispatcher";
priori_event_PriEventDispatcher.prototype = {
	hasEvent: function(event) {
		if(this.___ede.indexOf(event) > -1) {
			return true;
		}
		return false;
	}
	,addEventListener: function(event,listener) {
		this.___ede.push(event);
		this.___edl.push(listener);
	}
	,removeEventListener: function(event,listener) {
		var i = 0;
		var n = this.___ede.length;
		while(i < n) {
			if(this.___ede[i] == event && this.___edl[i] == listener) {
				this.___ede.splice(i,1);
				this.___edl.splice(i,1);
				--n;
			}
			++i;
		}
	}
	,removeAllEventListenersFromType: function(event) {
		var i = 0;
		var n = this.___ede.length;
		while(i < n) {
			if(this.___ede[i] == event) {
				this.___ede.splice(i,1);
				this.___edl.splice(i,1);
				--n;
			}
			++i;
		}
	}
	,dispatchEvent: function(event) {
		if(this.isKilled()) {
			return;
		}
		var tempEvent = this.___ede.slice();
		var tempListener = this.___edl.slice();
		var clone = null;
		if(event.currentTarget == null) {
			event.currentTarget = this;
		}
		var _g = 0;
		var _g1 = tempEvent.length;
		while(_g < _g1) {
			var i = _g++;
			if(tempEvent[i] == event.type) {
				clone = event.clone();
				clone.target = this;
				tempListener[i](clone);
				if(clone.propagate) {
					var c = clone.clone();
					c.bubble = false;
					this.propagateEvent(c);
				}
				if(clone.bubble) {
					var c1 = clone.clone();
					c1.propagate = false;
					this.bubbleEvent(c1);
				}
			}
		}
		if(clone == null && event.propagate) {
			clone = event.clone();
			clone.target = this;
			clone.bubble = false;
			this.propagateEvent(clone);
			clone = null;
		}
		if(clone == null && event.bubble) {
			clone = event.clone();
			clone.target = this;
			clone.propagate = false;
			this.bubbleEvent(clone);
			clone = null;
		}
	}
	,bubbleEvent: function(event) {
		if(this.isKilled()) {
			return;
		}
		if(this.bubbleTo != null) {
			this.bubbleTo.dispatchEvent(event);
		} else if(((this) instanceof priori_view_PriDisplay)) {
			var display = this;
			if(display.get_parent() != null) {
				display.get_parent().dispatchEvent(event);
			}
		}
	}
	,propagateEvent: function(event) {
		if(!this.isKilled() && ((this) instanceof priori_view_container_PriContainer)) {
			var container = this;
			var childList = container._childList.slice();
			var _g = 0;
			var _g1 = childList.length;
			while(_g < _g1) {
				var i = _g++;
				childList[i].dispatchEvent(event);
			}
		}
	}
	,isKilled: function() {
		return this._isKilled;
	}
	,kill: function() {
		this.bubbleTo = null;
		this.___ede = [];
		this.___edl = [];
		this._isKilled = true;
	}
	,__class__: priori_event_PriEventDispatcher
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var priori_view_PriDisplay = function() {
	var map = new helper_display_PriMap();
	map.set("left","0px");
	map.set("top","0px");
	map.set("width","100px");
	map.set("height","100px");
	map.set("overflow","hidden");
	map.set("z-index","1000");
	this.dh = { bgColor : null, x : 0, y : 0, width : 100, height : 100, clipping : true, depth : 1000, pointer : false, focusable : false, visible : true, mouseEnabled : true, anchorX : 0.5, anchorY : 0.5, rotation : 0, scaleX : 1, scaleY : 1, alpha : 1, disabled : false, eventHelper : new helper_browser_BrowserEventEngine(), styles : map, styleString : "", holdStyleUpdate : false};
	priori_event_PriEventDispatcher.call(this);
	this.createElement();
	this.dh.eventHelper.jqel = this.dh.element;
	this.dh.eventHelper.jsel = this.dh.jselement;
	this.dh.eventHelper.display = this;
	this.addEventListener("prievent_base_addedToApp",($_=this.dh.eventHelper,$bind($_,$_.onAddedToApp)));
	this.addEventListener("prievent_base_addedToContainer",$bind(this,this.__onAdded));
};
priori_view_PriDisplay.__name__ = "priori.view.PriDisplay";
priori_view_PriDisplay.__super__ = priori_event_PriEventDispatcher;
priori_view_PriDisplay.prototype = $extend(priori_event_PriEventDispatcher.prototype,{
	get_testIdentifier: function() {
		return this.dh.jselement.getAttribute("test");
	}
	,set_testIdentifier: function(value) {
		if(value == "" || value == null) {
			this.dh.jselement.removeAttribute("test");
		} else {
			this.dh.jselement.setAttribute("test",value);
		}
		return value;
	}
	,get_isDragging: function() {
		return this.dh.dragdata != null;
	}
	,allowTransition: function(key,time) {
		switch(key) {
		case "alpha":
			this.dh.styles.setTransition("opacity",time);
			break;
		case "background-color":
			this.dh.styles.setTransition("background-color",time);
			break;
		case "color":
			this.dh.styles.setTransition("color",time);
			break;
		case "font-size":
			this.dh.styles.setTransition("font-size",time);
			break;
		case "position":
			this.dh.styles.setTransition("left",time);
			this.dh.styles.setTransition("top",time);
			break;
		case "x":
			this.dh.styles.setTransition("left",time);
			break;
		case "y":
			this.dh.styles.setTransition("top",time);
			break;
		}
		this.__updateStyle();
	}
	,__updateStyle: function() {
		var dh = this.dh;
		if(dh.holdStyleUpdate || dh.jselement == null) {
			return;
		}
		var result = dh.styles.getValue();
		if(result != dh.styleString) {
			dh.styleString = result;
			dh.jselement.style.cssText = result;
		}
	}
	,__onAdded: function(e) {
		this.updateDepth();
		helper_browser_DomHelper.borderUpdate(this.dh.elementBorder,this.dh);
	}
	,set_corners: function(value) {
		if(value == null || value.length == 0) {
			this.corners = value == null ? null : [];
			this.dh.styles.remove("border-radius");
		} else {
			this.corners = value.slice();
			this.dh.styles.set("border-radius",value.slice(0,4).join("px ") + "px");
		}
		this.__updateStyle();
		helper_browser_DomHelper.borderUpdate(this.dh.elementBorder,this.dh);
		return value;
	}
	,set_tooltip: function(value) {
		if(this.tooltip == value) {
			return value;
		}
		this.tooltip = value;
		if(value == "" || value == null) {
			this.dh.jselement.removeAttribute("title");
		} else {
			this.dh.jselement.setAttribute("title",value);
		}
		return value;
	}
	,set_border: function(value) {
		this.border = value;
		if(value == null) {
			this.removeBorder();
		} else {
			this.applyBorder();
		}
		return value;
	}
	,set_shadow: function(value) {
		this.shadow = value;
		var shadowString = "";
		if(value != null && value.length > 0) {
			shadowString = value.join(",");
		}
		if(shadowString.length == 0) {
			this.dh.styles.remove("box-shadow");
			this.dh.styles.remove("-moz-box-shadow");
			this.dh.styles.remove("-webkit-box-shadow");
		} else {
			this.dh.styles.set("box-shadow",shadowString);
			this.dh.styles.set("-moz-box-shadow",shadowString);
			this.dh.styles.set("-webkit-box-shadow",shadowString);
		}
		this.__updateStyle();
		return value;
	}
	,set_filter: function(value) {
		this.filter = value;
		var filterString = "";
		if(value != null) {
			filterString = value.toString();
		}
		if(filterString.length == 0) {
			this.dh.styles.remove("filter");
			this.dh.styles.remove("-moz-filter");
			this.dh.styles.remove("-webkit-filter");
			this.dh.styles.remove("-o-filter");
			this.dh.styles.remove("-ms-filter");
		} else {
			this.dh.styles.set("filter",filterString);
			this.dh.styles.set("-moz-filter",filterString);
			this.dh.styles.set("-webkit-filter",filterString);
			this.dh.styles.set("-o-filter",filterString);
			this.dh.styles.set("-ms-filter",filterString);
		}
		this.__updateStyle();
		return value;
	}
	,applyBorder: function() {
		if(this.dh.elementBorder == null) {
			this.dh.elementBorder = window.document.createElement("div");
			this.dh.elementBorder.className = "priori_stylebase";
			this.dh.elementBorder.style.cssText = "box-sizing:border-box !important;position:absolute;left:0px;right:0px;bottom:0px;top:0px;pointer-events:none;";
			this.dh.jselement.appendChild(this.dh.elementBorder);
		}
		this.dh.elementBorder.style.border = this.border.toString();
		helper_browser_DomHelper.borderUpdate(this.dh.elementBorder,this.dh);
	}
	,removeBorder: function() {
		if(this.dh.elementBorder != null) {
			this.dh.jselement.removeChild(this.dh.elementBorder);
			this.dh.elementBorder = null;
		}
	}
	,get_clipping: function() {
		return this.dh.clipping;
	}
	,set_clipping: function(value) {
		if(value) {
			this.dh.clipping = true;
			this.dh.styles.set("overflow","hidden");
		} else {
			this.dh.clipping = false;
			this.dh.styles.remove("overflow");
		}
		this.__updateStyle();
		return value;
	}
	,getRandomId: function(len) {
		if(len == null) {
			len = 7;
		}
		var length = len;
		var charactersToUse = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890";
		var result = "";
		result = "";
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			result += charactersToUse.charAt(Math.floor(charactersToUse.length * Math.random()));
		}
		result += "_" + new Date().getTime();
		return result;
	}
	,getOutDOMDimensions: function() {
		var element = this.dh.jselement;
		if(element.cloneNode != null) {
			element = this.dh.jselement.cloneNode(true);
			element.style.left = "0px";
			element.style.top = "0px";
			element.style.color = "";
			element.style.zIndex = "";
			element.style.transition = "";
			element.style.pointerEvents = "";
			element.style.cursor = "";
			element.style.backgroundColor = "";
		}
		var code = element.outerHTML;
		if(Object.prototype.hasOwnProperty.call(priori_view_PriDisplay.OUTER_DOM_SIZE_CACHE.h,code)) {
			return priori_view_PriDisplay.OUTER_DOM_SIZE_CACHE.h[code];
		}
		priori_app_PriApp.g().frame.innerHTML = code;
		var box = helper_browser_DomHelper.getBoundingClientRect(priori_app_PriApp.g().frame.getElementsByTagName("div")[0]);
		priori_view_PriDisplay.OUTER_DOM_SIZE_CACHE.h[code] = box;
		priori_app_PriApp.g().frame.innerHTML = "";
		return box;
	}
	,get_widthScaled: function() {
		return this.get_width() * this.dh.scaleX;
	}
	,set_widthScaled: function(value) {
		var thisWidth = this.get_width();
		if(thisWidth != 0) {
			this.set_scaleX((value < 0 ? 0 : value) / thisWidth);
		}
		return value;
	}
	,get_heightScaled: function() {
		return this.get_height() * this.dh.scaleY;
	}
	,set_heightScaled: function(value) {
		var thisHeight = this.get_height();
		if(thisHeight != 0) {
			this.set_scaleY((value < 0 ? 0 : value) / thisHeight);
		}
		return value;
	}
	,set_width: function(value) {
		if(value == null) {
			this.dh.width = null;
			this.dh.styles.remove("width");
		} else {
			this.dh.width = Math.max(0,value);
			this.dh.styles.set("width",this.dh.width + "px");
		}
		this.__updateStyle();
		return value;
	}
	,get_width: function() {
		var result = this.dh.width;
		if(result == null) {
			result = helper_browser_DomHelper.getBoundingClientRect(this.dh.jselement).width;
			if(result == 0 && !this.hasApp()) {
				result = this.getOutDOMDimensions().width;
				if(this.get_scaleX() != 0 && this.get_scaleX() != 1) {
					result /= this.get_scaleX();
				}
			} else {
				var ref = this;
				var refScale = this.get_scaleX();
				while(ref.get_parent() != null) {
					ref = ref.get_parent();
					refScale = ref.get_scaleX() * refScale;
				}
				if(refScale != 0 && refScale != 1) {
					result /= refScale;
				}
			}
		}
		return result;
	}
	,set_height: function(value) {
		if(value == null) {
			this.dh.height = null;
			this.dh.styles.remove("height");
		} else {
			this.dh.height = Math.max(0,value);
			this.dh.styles.set("height",this.dh.height + "px");
		}
		this.__updateStyle();
		return value;
	}
	,get_height: function() {
		var result = this.dh.height;
		if(result == null) {
			result = helper_browser_DomHelper.getBoundingClientRect(this.dh.jselement).height;
			if(result == 0 && !this.hasApp()) {
				result = this.getOutDOMDimensions().height;
				if(this.get_scaleY() != 0 && this.get_scaleY() != 1) {
					result /= this.get_scaleY();
				}
			} else {
				var ref = this;
				var refScale = this.get_scaleY();
				while(ref.get_parent() != null) {
					ref = ref.get_parent();
					refScale = ref.get_scaleY() * refScale;
				}
				if(refScale != 0 && refScale != 1) {
					result /= refScale;
				}
			}
		}
		return result;
	}
	,set_maxX: function(value) {
		var tmp = this.get_widthScaled();
		this.dh.x = value - tmp;
		this.dh.styles.set("left",this.dh.x + "px");
		this.__updateStyle();
		return value;
	}
	,set_maxY: function(value) {
		var tmp = this.get_heightScaled();
		this.dh.y = value - tmp;
		this.dh.styles.set("top",this.dh.y + "px");
		this.__updateStyle();
		return value;
	}
	,set_centerX: function(value) {
		var tmp = this.get_widthScaled() / 2;
		this.dh.x = value - tmp;
		this.dh.styles.set("left",this.dh.x + "px");
		this.__updateStyle();
		return value;
	}
	,set_centerY: function(value) {
		var tmp = this.get_heightScaled() / 2;
		this.dh.y = value - tmp;
		this.dh.styles.set("top",this.dh.y + "px");
		this.__updateStyle();
		return value;
	}
	,set_x: function(value) {
		this.dh.x = value;
		this.dh.styles.set("left",value + "px");
		this.__updateStyle();
		return value;
	}
	,startBatchUpdate: function() {
		this.dh.holdStyleUpdate = true;
	}
	,endBatchUpdate: function() {
		this.dh.holdStyleUpdate = false;
		this.__updateStyle();
	}
	,set_y: function(value) {
		this.dh.y = value;
		this.dh.styles.set("top",value + "px");
		this.__updateStyle();
		return value;
	}
	,get_x: function() {
		return this.dh.x;
	}
	,get_y: function() {
		return this.dh.y;
	}
	,get_maxX: function() {
		return this.get_x() + this.get_widthScaled();
	}
	,get_maxY: function() {
		return this.get_y() + this.get_heightScaled();
	}
	,get_centerX: function() {
		return this.get_x() + this.get_widthScaled() / 2;
	}
	,get_centerY: function() {
		return this.get_y() + this.get_heightScaled() / 2;
	}
	,get_scaleX: function() {
		return this.dh.scaleX;
	}
	,set_scaleX: function(value) {
		this.dh.scaleX = value == null ? 1 : value == 0 ? helper_browser_BrowserHandler.MIN_FLOAT_POINT : value;
		helper_browser_DomHelper.apply2dTransformation(this.dh.styles,this.dh.scaleX,this.dh.scaleY,this.dh.rotation,this.dh.anchorX,this.dh.anchorY);
		this.__updateStyle();
		return value;
	}
	,get_scaleY: function() {
		return this.dh.scaleY;
	}
	,set_scaleY: function(value) {
		this.dh.scaleY = value == null ? 1 : value == 0 ? helper_browser_BrowserHandler.MIN_FLOAT_POINT : value;
		helper_browser_DomHelper.apply2dTransformation(this.dh.styles,this.dh.scaleX,this.dh.scaleY,this.dh.rotation,this.dh.anchorX,this.dh.anchorY);
		this.__updateStyle();
		return value;
	}
	,get_anchorX: function() {
		return this.dh.anchorX;
	}
	,set_anchorX: function(value) {
		this.dh.anchorX = value == null ? 0 : value;
		helper_browser_DomHelper.apply2dTransformation(this.dh.styles,this.dh.scaleX,this.dh.scaleY,this.dh.rotation,this.dh.anchorX,this.dh.anchorY);
		this.__updateStyle();
		return value;
	}
	,get_anchorY: function() {
		return this.dh.anchorY;
	}
	,set_anchorY: function(value) {
		this.dh.anchorY = value == null ? 0 : value;
		helper_browser_DomHelper.apply2dTransformation(this.dh.styles,this.dh.scaleX,this.dh.scaleY,this.dh.rotation,this.dh.anchorX,this.dh.anchorY);
		this.__updateStyle();
		return value;
	}
	,get_rotation: function() {
		return this.dh.rotation;
	}
	,set_rotation: function(value) {
		this.dh.rotation = value == null ? 0 : value;
		helper_browser_DomHelper.apply2dTransformation(this.dh.styles,this.dh.scaleX,this.dh.scaleY,this.dh.rotation,this.dh.anchorX,this.dh.anchorY);
		this.__updateStyle();
		return value;
	}
	,get_alpha: function() {
		return this.dh.alpha;
	}
	,set_alpha: function(value) {
		this.dh.alpha = value == null ? 1 : value;
		if(value == null || value >= 1) {
			this.dh.styles.remove("opacity");
		} else {
			this.dh.styles.set("opacity",value == null ? "null" : "" + value);
		}
		this.__updateStyle();
		return value;
	}
	,hasApp: function() {
		try {
			var app = priori_app_PriApp.g();
			var tree = this.getTreeList();
			if(tree[tree.length - 1] == app) {
				return true;
			}
			return false;
		} catch( _g ) {
			return false;
		}
	}
	,get_parent: function() {
		return this.dh.parent;
	}
	,updateDepth: function() {
		this.dh.depth = this.dh.parent.dh.depth - 1;
		this.dh.styles.set("z-index",Std.string(this.dh.depth));
		if(this.dh.elementBorder != null) {
			this.dh.elementBorder.style.zIndex = Std.string(this.dh.depth);
		}
		this.__updateStyle();
	}
	,getJSElement: function() {
		return this.dh.jselement;
	}
	,getElement: function() {
		return this.dh.element;
	}
	,setCSS: function(property,value) {
		this.dh.styles.set(property,value);
		this.__updateStyle();
	}
	,getCSS: function(property) {
		return this.getElement().css(property);
	}
	,get_bgColor: function() {
		return this.dh.bgColor;
	}
	,set_bgColor: function(value) {
		this.dh.bgColor = value;
		if(value == null) {
			this.dh.styles.remove("background-color");
		} else {
			this.dh.styles.set("background-color",priori_geom_PriColor.toString(value));
		}
		this.__updateStyle();
		return value;
	}
	,addEventListener: function(event,listener) {
		this.dh.eventHelper.registerEvent(event);
		if(event == "click") {
			this.set_pointer(true);
		}
		priori_event_PriEventDispatcher.prototype.addEventListener.call(this,event,listener);
	}
	,removeEventListener: function(event,listener) {
		priori_event_PriEventDispatcher.prototype.removeEventListener.call(this,event,listener);
		if(!this.hasEvent(event)) {
			this.dh.eventHelper.removeEvent(event);
		}
		if(event == "click" && this.hasEvent("click") == false) {
			this.set_pointer(false);
		}
	}
	,createElement: function() {
		var jsElement = window.document.createElement("div");
		jsElement.className = "priori_stylebase";
		this.dh.jselement = jsElement;
		this.__updateStyle();
		this.dh.element = $(jsElement);
	}
	,removeFromParent: function() {
		if(this.dh.parent != null) {
			this.dh.parent.removeChild(this);
		}
	}
	,kill: function() {
		this.dh.eventHelper.kill();
		this.getElement().off();
		this.getElement().find("*").off();
		priori_event_PriEventDispatcher.prototype.kill.call(this);
	}
	,get_visible: function() {
		return this.dh.visible;
	}
	,set_visible: function(value) {
		if(value == true) {
			this.dh.visible = true;
			this.dh.styles.remove("visibility");
		} else {
			this.dh.visible = false;
			this.dh.styles.set("visibility","hidden");
		}
		this.__updateStyle();
		return value;
	}
	,get_pointer: function() {
		return this.dh.pointer;
	}
	,set_pointer: function(value) {
		if(value == true) {
			this.dh.pointer = true;
			this.dh.styles.set("cursor","pointer");
		} else {
			this.dh.pointer = false;
			this.dh.styles.remove("cursor");
		}
		this.__updateStyle();
		return value;
	}
	,get_mouseEnabled: function() {
		return this.dh.mouseEnabled;
	}
	,set_mouseEnabled: function(value) {
		if(value == true) {
			this.dh.mouseEnabled = true;
			this.dh.styles.remove("pointer-events");
		} else {
			this.dh.mouseEnabled = false;
			this.dh.styles.set("pointer-events","none");
		}
		this.__updateStyle();
		return value;
	}
	,hasDisabledParent: function() {
		if(this.get_parent() != null) {
			if(this.get_parent().get_disabled()) {
				return true;
			} else if(this.get_parent().hasDisabledParent()) {
				return true;
			}
		}
		return false;
	}
	,get_disabled: function() {
		if(this.dh.disabled || this.dh.jselement.hasAttribute("disabled")) {
			return true;
		}
		return false;
	}
	,set_disabled: function(value) {
		this.dh.disabled = value;
		if(value) {
			this.dh.jselement.setAttribute("priori-disabled","disabled");
			helper_browser_DomHelper.disableAll(this.dh.jselement);
		} else {
			this.dh.jselement.removeAttribute("priori-disabled");
			if(!this.hasDisabledParent()) {
				helper_browser_DomHelper.enableAllUpPrioriDisabled(this.dh.jselement);
			}
		}
		return value;
	}
	,getGlobalBox: function() {
		var result = new priori_geom_PriGeomBox();
		if(this.hasApp()) {
			var points = this.localToGlobal(new priori_geom_PriGeomPoint(this.get_x(),this.get_y()));
			result.x = points.x;
			result.y = points.y;
		}
		result.width = this.get_width();
		result.height = this.get_height();
		return result;
	}
	,getTreeList: function() {
		var result = [];
		result.push(this);
		var p = this.get_parent();
		while(p != null) {
			result.push(p);
			p = p.get_parent();
		}
		return result;
	}
	,get_mousePoint: function() {
		var app = priori_app_PriApp.g();
		return this.globalToLocal(new priori_geom_PriGeomPoint(app.get_mousePoint().x,app.get_mousePoint().y));
	}
	,globalToLocal: function(point) {
		var result = point.clone();
		var list = this.getTreeList();
		list.reverse();
		var _g = 0;
		while(_g < list.length) {
			var display = list[_g];
			++_g;
			result.x -= display.get_x() - display.getJSElement().scrollLeft;
			result.y -= display.get_y() - display.getJSElement().scrollTop;
		}
		return result;
	}
	,localToGlobal: function(point) {
		var result = point.clone();
		var list = this.getTreeList();
		list.shift();
		var _g = 0;
		while(_g < list.length) {
			var display = list[_g];
			++_g;
			result.x += display.get_x() - display.getJSElement().scrollLeft;
			result.y += display.get_y() - display.getJSElement().scrollTop;
		}
		return result;
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		var _gthis = this;
		this.stopDrag();
		this.dispatchEvent(new priori_event_PriEvent("prievent_base_drag_start",false,false,{ distance : 0.0}));
		var tmp = priori_app_PriApp.g().get_mousePoint();
		var tmp1 = new priori_geom_PriGeomPoint(this.get_x(),this.get_y());
		var tmp2 = this.get_x();
		var tmp3 = this.get_y();
		this.dh.dragdata = { originalPointMouse : tmp, originalPosition : tmp1, lastPosition : new priori_geom_PriGeomPoint(tmp2,tmp3)};
		if(lockCenter) {
			if(this.get_parent() != null) {
				var parentMouse = this.get_parent().get_mousePoint();
				this.set_centerX(parentMouse.x);
				this.set_centerY(parentMouse.y);
				this.dh.dragdata.lastPosition.x = this.get_x();
				this.dh.dragdata.lastPosition.y = this.get_y();
				var distance = this.dh.dragdata.originalPosition.distanceFrom(this.dh.dragdata.lastPosition);
				this.dispatchEvent(new priori_event_PriEvent("prievent_base_drag",false,false,{ distance : distance}));
			}
		}
		var runFunction = function() {
			var curPoint = priori_app_PriApp.g().get_mousePoint();
			var diffx = curPoint.x - _gthis.dh.dragdata.originalPointMouse.x;
			var diffy = curPoint.y - _gthis.dh.dragdata.originalPointMouse.y;
			if(bounds == null) {
				_gthis.set_x(_gthis.dh.dragdata.originalPosition.x + diffx);
				_gthis.set_y(_gthis.dh.dragdata.originalPosition.y + diffy);
			} else {
				_gthis.set_x(Math.max(Math.min(_gthis.dh.dragdata.originalPosition.x + diffx,bounds.x + bounds.width),bounds.x));
				_gthis.set_y(Math.max(Math.min(_gthis.dh.dragdata.originalPosition.y + diffy,bounds.y + bounds.height),bounds.y));
			}
			if(_gthis.dh.dragdata.lastPosition.x != _gthis.get_x() || _gthis.dh.dragdata.lastPosition.y != _gthis.get_y()) {
				_gthis.dh.dragdata.lastPosition.x = _gthis.get_x();
				_gthis.dh.dragdata.lastPosition.y = _gthis.get_y();
				var distance = _gthis.dh.dragdata.originalPosition.distanceFrom(_gthis.dh.dragdata.lastPosition);
				_gthis.dispatchEvent(new priori_event_PriEvent("prievent_base_drag",false,false,{ distance : distance}));
			}
		};
		var timer = new haxe_Timer(30);
		timer.run = runFunction;
		this.dh.dragdata.t = timer;
		runFunction();
	}
	,stopDrag: function() {
		if(this.dh.dragdata != null) {
			var distance = this.dh.dragdata.originalPosition.distanceFrom(this.dh.dragdata.lastPosition);
			this.dh.dragdata.t.stop();
			this.dh.dragdata.t.run = null;
			this.dh.dragdata = null;
			this.dispatchEvent(new priori_event_PriEvent("prievent_base_drag_stop",false,false,{ distance : distance}));
		}
	}
	,get_focusable: function() {
		return this.dh.focusable;
	}
	,set_focusable: function(value) {
		if(this.dh.focusable != value) {
			this.dh.focusable = value;
			this.dh.jselement.tabIndex = value ? 0 : null;
		}
		return value;
	}
	,setFocus: function() {
		if(this.get_focusable()) {
			this.dh.jselement.focus();
		}
	}
	,removeFocus: function() {
		if(this.get_focusable()) {
			this.dh.jselement.blur();
		}
	}
	,hasFocus: function() {
		try {
			var curEl = window.document.activeElement;
			var hasAppFocus = false;
			try {
				hasAppFocus = priori_app_PriApp.g().hasFocus();
			} catch( _g ) {
			}
			if(curEl != null && hasAppFocus && helper_browser_DomHelper.hasChild(this.dh.jselement,curEl)) {
				return true;
			}
		} catch( _g ) {
		}
		return false;
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + (this.get_testIdentifier() == null ? "" : " (" + this.get_testIdentifier() + ")");
	}
	,__class__: priori_view_PriDisplay
});
var priori_view_container_PriContainer = function() {
	this._migratingView = false;
	this._childList = [];
	priori_view_PriDisplay.call(this);
};
priori_view_container_PriContainer.__name__ = "priori.view.container.PriContainer";
priori_view_container_PriContainer.__super__ = priori_view_PriDisplay;
priori_view_container_PriContainer.prototype = $extend(priori_view_PriDisplay.prototype,{
	get_numChildren: function() {
		return this._childList.length;
	}
	,getChild: function(index) {
		if(index != null && index >= 0 && index < this._childList.length) {
			return this._childList[index];
		} else {
			return null;
		}
	}
	,addChildAtIndex: function(child,index) {
		this.addChildListAtIndex([child],index);
	}
	,addChildList: function(childList) {
		this.addChildListAtIndex(childList,null);
	}
	,addChildListAtIndex: function(childList,index) {
		var realItens = [];
		var _g = 0;
		while(_g < childList.length) {
			var item = childList[_g];
			++_g;
			var value = item;
			if((((value) instanceof priori_view_PriDisplay) ? value : null) != null) {
				realItens.push(item);
			}
		}
		var _g = 0;
		while(_g < realItens.length) {
			var child = realItens[_g];
			++_g;
			child.removeFromParent();
		}
		var thisHasApp = this.hasApp();
		var thisDisabled = this.get_disabled();
		var thisHasDisabledParent = this.hasDisabledParent();
		var referenceElement = index == null || index < 0 ? null : this.getChild(index);
		var docFrag = window.document.createDocumentFragment();
		var childPos = index;
		var _g = 0;
		while(_g < realItens.length) {
			var child = realItens[_g];
			++_g;
			if(referenceElement == null) {
				this._childList.push(child);
			} else {
				this._childList.splice(childPos,0,child);
				++childPos;
			}
			child.dh.parent = this;
			if(thisHasApp) {
				if(thisDisabled) {
					helper_browser_DomHelper.disableAll(child.getJSElement());
				} else if(!thisHasDisabledParent) {
					helper_browser_DomHelper.enableAllUpPrioriDisabled(child.getJSElement());
				}
			}
			docFrag.appendChild(child.getJSElement());
		}
		if(referenceElement == null) {
			this.dh.jselement.appendChild(docFrag);
		} else {
			this.dh.jselement.insertBefore(docFrag,referenceElement.getJSElement());
		}
		var _g = 0;
		var _g1 = realItens.length;
		while(_g < _g1) {
			var i = _g++;
			var child = realItens[i];
			if(thisHasApp) {
				child.dispatchEvent(new priori_event_PriEvent("prievent_base_addedToApp",true));
			}
			child.dispatchEvent(new priori_event_PriEvent("prievent_base_addedToContainer",true));
		}
	}
	,removeChildList: function(childList) {
		var realItens = [];
		var _g = 0;
		while(_g < childList.length) {
			var item = childList[_g];
			++_g;
			var value = item;
			if((((value) instanceof priori_view_PriDisplay) ? value : null) != null) {
				realItens.push(item);
			}
		}
		var hasAppBefore = this.hasApp();
		var _g = 0;
		while(_g < realItens.length) {
			var child = realItens[_g];
			++_g;
			if(child.get_parent() == this) {
				HxOverrides.remove(this._childList,child);
				this.dh.jselement.removeChild(child.getJSElement());
				child.dh.parent = null;
				if(hasAppBefore) {
					child.dispatchEvent(new priori_event_PriEvent("prievent_base_removedFromApp",true));
				}
				child.dispatchEvent(new priori_event_PriEvent("prievent_base_removedFromContainer",true,false,this));
			}
		}
	}
	,addChild: function(child) {
		this.addChildList([child]);
	}
	,removeChild: function(child) {
		this.removeChildList([child]);
	}
	,kill: function() {
		var _g = 0;
		var _g1 = this._childList.length;
		while(_g < _g1) {
			var i = _g++;
			this._childList[i].kill();
		}
		this._childList = [];
		priori_view_PriDisplay.prototype.kill.call(this);
	}
	,getContentBox: function() {
		var result = new priori_geom_PriGeomBox();
		var i = 0;
		var n = this.get_numChildren();
		while(i < n) {
			result.x = Math.min(result.x,this.getChild(i).get_x());
			result.y = Math.min(result.y,this.getChild(i).get_y());
			result.width = Math.max(result.width,this.getChild(i).get_maxX());
			result.height = Math.max(result.height,this.getChild(i).get_maxY());
			++i;
		}
		return result;
	}
	,set_width: function(value) {
		if(Math.max(0,value) != this.get_width()) {
			priori_view_PriDisplay.prototype.set_width.call(this,value);
			this.dispatchEvent(new priori_event_PriEvent("prievent_base_resize",false));
		}
		return value;
	}
	,set_height: function(value) {
		if(Math.max(0,value) != this.get_height()) {
			priori_view_PriDisplay.prototype.set_height.call(this,value);
			this.dispatchEvent(new priori_event_PriEvent("prievent_base_resize",false));
		}
		return value;
	}
	,__class__: priori_view_container_PriContainer
});
var priori_view_container_PriGroup = function() {
	priori_view_container_PriContainer.call(this);
	this._setupCalled = false;
	this._invalid = false;
	this.addEventListener("prievent_base_addedToApp",$bind(this,this._onAddedToApp));
	this.addEventListener("prievent_base_resize",$bind(this,this._onPriResizeGroup));
};
priori_view_container_PriGroup.__name__ = "priori.view.container.PriGroup";
priori_view_container_PriGroup.__super__ = priori_view_container_PriContainer;
priori_view_container_PriGroup.prototype = $extend(priori_view_container_PriContainer.prototype,{
	_onPriResizeGroup: function(e) {
		this.invalidate();
	}
	,kill: function() {
		if(this._invalidateTimer != null) {
			this._invalidateTimer.stop();
			this._invalidateTimer = null;
		}
		priori_view_container_PriContainer.prototype.kill.call(this);
	}
	,addChildList: function(childList) {
		priori_view_container_PriContainer.prototype.addChildList.call(this,childList);
		this.invalidate();
	}
	,removeChildList: function(childList) {
		priori_view_container_PriContainer.prototype.removeChildList.call(this,childList);
		this.invalidate();
	}
	,addChild: function(view) {
		priori_view_container_PriContainer.prototype.addChild.call(this,view);
		this.invalidate();
	}
	,removeChild: function(view) {
		priori_view_container_PriContainer.prototype.removeChild.call(this,view);
		this.invalidate();
	}
	,_onAddedToApp: function(e) {
		this.removeEventListener("prievent_base_addedToApp",$bind(this,this._onAddedToApp));
		if(this._setupCalled == false) {
			this._setupCalled = true;
			this.setup();
		}
		this.validate();
	}
	,setup: function() {
	}
	,paint: function() {
	}
	,isInvalid: function() {
		return this._invalid;
	}
	,canPaint: function() {
		return this._setupCalled;
	}
	,revalidate: function() {
		this.invalidate();
		this.validate();
	}
	,validate: function() {
		if(this._invalidateTimer != null) {
			this._invalidateTimer.stop();
			this._invalidateTimer = null;
		}
		if(!this._isKilled && this._invalid && this.canPaint()) {
			var child;
			this.paint();
			var _g = 0;
			var _g1 = this.get_numChildren();
			while(_g < _g1) {
				var i = _g++;
				child = this.getChild(i);
				if(child.validate != null) {
					child.validate();
				}
			}
			this._invalid = false;
		}
	}
	,invalidate: function() {
		this._invalid = true;
		if(this._invalidateTimer != null) {
			this._invalidateTimer.stop();
			this._invalidateTimer = null;
		}
		this._invalidateTimer = haxe_Timer.delay($bind(this,this.validate),33);
	}
	,invalidateChildren: function() {
		var _g = 0;
		var _g1 = this._childList.length;
		while(_g < _g1) {
			var i = _g++;
			if(((this._childList[i]) instanceof priori_view_container_PriGroup)) {
				(js_Boot.__cast(this._childList[i] , priori_view_container_PriGroup)).invalidateChildren();
			}
		}
		this.invalidate();
	}
	,getContentBox: function() {
		this.validate();
		return priori_view_container_PriContainer.prototype.getContentBox.call(this);
	}
	,__class__: priori_view_container_PriGroup
});
var priori_app_PriApp = function() {
	this.___hasFocus = false;
	this.___ymouse = 0;
	this.___xmouse = 0;
	try {
		var seo = window.document.getElementById("priori_seo_content");
		if(seo != null) {
			seo.remove();
		}
		seo = null;
	} catch( _g ) {
	}
	if(priori_app_PriApp._g != null) {
		throw haxe_Exception.thrown("Do not create PriApp instance");
	} else {
		priori_app_PriApp._g = this;
	}
	this._fps = 60;
	priori_view_container_PriGroup.call(this);
	this.set_focusable(true);
	this.dh.styles.set("width","100%");
	this.dh.styles.set("height","100%");
	this.dh.styles.set("position","fixed");
	this.set_bgColor(16777215);
	this.set_clipping(true);
	helper_browser_StyleHelper.applyFontStyle(this.dh.styles,new priori_style_font_PriFontStyle());
	this.__updateStyle();
	window.document.body.style.border = "0px";
	window.document.body.style.margin = "0px";
	if(window.document.addEventListener != null) {
		window.document.addEventListener("touchstart",$bind(this,this.___onPointerMove),true);
		window.document.addEventListener("touchmove",$bind(this,this.___onPointerMove),true);
		window.document.addEventListener("mousedown",$bind(this,this.___onPointerMove),true);
		window.document.addEventListener("mousemove",$bind(this,this.___onPointerMove),true);
		window.document.addEventListener("focus",$bind(this,this.___onAppFocusIn),true);
		window.document.addEventListener("blur",$bind(this,this.___onAppFocusOut),true);
		window.document.addEventListener("keydown",$bind(this,this.__onAppKey),true);
		window.document.addEventListener("keyup",$bind(this,this.__onAppKey),true);
	} else {
		window.document.onmousedown = $bind(this,this.___onPointerMove);
		window.document.ontouchstart = $bind(this,this.___onPointerMove);
		window.document.onmousemove = $bind(this,this.___onPointerMove);
		window.document.ontouchmove = $bind(this,this.___onPointerMove);
		window.document.onfocus = $bind(this,this.___onAppFocusIn);
		window.document.onblur = $bind(this,this.___onAppFocusOut);
		window.document.onkeydown = $bind(this,this.__onAppKey);
		window.document.onkeyup = $bind(this,this.__onAppKey);
	}
	window.onresize = $bind(this,this.___onWindowResize);
	window.onmouseup = $bind(this,this.___onWindowMouseUp);
	this.___applyPreventBackspace();
	window.document.body.appendChild(this.dh.jselement);
	this.frame = window.document.createElement("div");
	this.frame.className = "priori_stylebase";
	this.frame.style.cssText = this.dh.jselement.style.cssText + "overflow:visible;width:1px;height:1px;visibility:hidden;";
	window.document.body.appendChild(this.frame);
	this.startApplication();
};
priori_app_PriApp.__name__ = "priori.app.PriApp";
priori_app_PriApp.g = function() {
	if(priori_app_PriApp._g == null) {
		throw haxe_Exception.thrown("Application not yet created");
	}
	return priori_app_PriApp._g;
};
priori_app_PriApp.__super__ = priori_view_container_PriGroup;
priori_app_PriApp.prototype = $extend(priori_view_container_PriGroup.prototype,{
	startApplication: function() {
		this.dispatchEvent(new priori_event_PriEvent("prievent_base_addedToApp",true));
		this.dispatchEvent(new priori_event_PriEvent("prievent_base_resize",false));
		this.revalidate();
	}
	,get_title: function() {
		var result = window.document.title;
		if(result == null) {
			return "";
		} else {
			return result;
		}
	}
	,set_title: function(value) {
		window.document.title = value;
		return value;
	}
	,updateBasicFontStyle: function() {
		helper_browser_StyleHelper.applyFontStyle(this.dh.styles,new priori_style_font_PriFontStyle());
		this.__updateStyle();
		if(this.frame != null) {
			this.frame.style.cssText = this.dh.jselement.style.cssText + "overflow:visible;width:1px;height:1px;visibility:hidden;";
		}
		this.revalidate();
	}
	,get_mousePoint: function() {
		return new priori_geom_PriGeomPoint(this.___xmouse,this.___ymouse);
	}
	,___onPointerMove: function(e) {
		if(e.touches != null) {
			if(e.touches.length > 0) {
				this.___xmouse = e.touches[0].pageX;
				this.___ymouse = e.touches[0].pageY;
			}
		} else {
			this.___xmouse = e.pageX;
			this.___ymouse = e.pageY;
		}
	}
	,___onWindowResize: function() {
		this.dispatchEvent(new priori_event_PriEvent("prievent_base_resize",false));
	}
	,___onWindowMouseUp: function(e) {
		this.dispatchEvent(new priori_event_PriTapEvent("mouseup",false));
	}
	,set_width: function(value) {
		return value;
	}
	,get_width: function() {
		return this.getAppSize().width;
	}
	,set_height: function(value) {
		return value;
	}
	,get_height: function() {
		return this.getAppSize().height;
	}
	,set_x: function(value) {
		return 0;
	}
	,get_x: function() {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,get_y: function() {
		return 0;
	}
	,get_maxX: function() {
		return 0;
	}
	,get_maxY: function() {
		return 0;
	}
	,set_centerX: function(value) {
		return 0;
	}
	,set_centerY: function(value) {
		return 0;
	}
	,getMSUptate: function() {
		return 1000 / this._fps | 0;
	}
	,___applyPreventBackspace: function() {
		if(!priori_system_PriDevice.isMobileDevice()) {
			this.getDocument().keydown(function(e) {
				if(e.which == 8 && !$(e.target).is("input:not([readonly]):not([type=radio]):not([type=checkbox]), textarea, [contentEditable], [contentEditable=true]")) {
					e.preventDefault();
				}
			});
		}
	}
	,getAppSize: function() {
		if(this.dh.jselement == null) {
			return new priori_geom_PriGeomBox();
		}
		var b = new priori_geom_PriGeomBox();
		b.width = this.dh.jselement.clientWidth;
		b.height = this.dh.jselement.clientHeight;
		b.x = 0;
		b.y = 0;
		return b;
	}
	,getDocument: function() {
		if(this._document == null) {
			this._document = $(window.document);
		}
		return this._document;
	}
	,getWindow: function() {
		if(this._window == null) {
			this._window = $(window);
		}
		return this._window;
	}
	,getBody: function() {
		if(this._body == null) {
			this._body = $("body");
		}
		return this._body;
	}
	,__onAppKey: function(e) {
		priori_app_PriApp.ALT_IS_ACTIVE = e.altKey;
		priori_app_PriApp.CTRL_IS_ACTIVE = e.ctrlKey;
		priori_app_PriApp.SHIFT_IS_ACTIVE = e.shiftKey;
		if(e.keyCode == 224 || e.keyCode == 91 || e.keyCode == 93) {
			priori_app_PriApp.COMMAND_IS_ACTIVE = e.type == "keydown";
		}
	}
	,___onAppFocusIn: function() {
		this.___hasFocus = true;
	}
	,___onAppFocusOut: function() {
		this.___hasFocus = false;
	}
	,hasFocus: function() {
		return this.___hasFocus;
	}
	,__class__: priori_app_PriApp
});
var Main = function() {
	priori_app_PriApp.call(this);
};
Main.__name__ = "Main";
Main.__super__ = priori_app_PriApp;
Main.prototype = $extend(priori_app_PriApp.prototype,{
	setup: function() {
		this.example = new priori_view_text_PriText();
		this.example.set_text("Hello World!");
		this.example.set_fontStyle(new priori_style_font_PriFontStyle(null,null,"bold"));
		this.addChild(this.example);
	}
	,paint: function() {
		this.example.set_centerX(this.get_width() / 2);
		this.example.set_centerY(this.get_height() / 2);
	}
	,__class__: Main
});
Math.__name__ = "Math";
var Priori_$auto_$main_$builder = function() { };
Priori_$auto_$main_$builder.__name__ = "Priori_auto_main_builder";
Priori_$auto_$main_$builder.main = function() {
	haxe_Timer.delay(function() {
		new Main();
	},0);
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var helper_browser_BrowserEventEngine = function() {
	this.registeredEvent = [];
};
helper_browser_BrowserEventEngine.__name__ = "helper.browser.BrowserEventEngine";
helper_browser_BrowserEventEngine.prototype = {
	onAddedToApp: function(e) {
		this.addAllActions();
		this.display.addEventListener("prievent_base_removedFromApp",$bind(this,this.onRemovedFromApp));
		this.display.removeEventListener("prievent_base_addedToApp",$bind(this,this.onAddedToApp));
	}
	,onRemovedFromApp: function(e) {
		this.removeAllActions();
		this.display.removeEventListener("prievent_base_removedFromApp",$bind(this,this.onRemovedFromApp));
		this.display.addEventListener("prievent_base_addedToApp",$bind(this,this.onAddedToApp));
	}
	,removeEvent: function(event) {
		if(["mouseleave","mouseenter","mousemove","mousedown","mouseup","click","touchdown","touchup","touchmove","prievent_base_scroll","keyup","keydown","focusin","focusout"].indexOf(event) <= -1) {
			return;
		}
		HxOverrides.remove(this.registeredEvent,event);
		this.dettachFromElement(event);
	}
	,registerEvent: function(event) {
		if(["mouseleave","mouseenter","mousemove","mousedown","mouseup","click","touchdown","touchup","touchmove","prievent_base_scroll","keyup","keydown","focusin","focusout"].indexOf(event) <= -1) {
			return;
		}
		if(this.registeredEvent.indexOf(event) == -1) {
			this.registeredEvent.push(event);
			if(window.document.documentElement.contains(this.jsel)) {
				this.attachToElement(event);
			}
		}
	}
	,removeAllActions: function() {
		var _g = 0;
		var _g1 = this.registeredEvent.length;
		while(_g < _g1) {
			var i = _g++;
			this.dettachFromElement(this.registeredEvent[i]);
		}
	}
	,addAllActions: function() {
		var _g = 0;
		var _g1 = this.registeredEvent.length;
		while(_g < _g1) {
			var i = _g++;
			this.attachToElement(this.registeredEvent[i]);
		}
	}
	,isOnDom: function() {
		return window.document.documentElement.contains(this.jsel);
	}
	,isSpecial: function(event) {
		return ["mouseleave","mouseenter","mousemove","mousedown","mouseup","click","touchdown","touchup","touchmove","prievent_base_scroll","keyup","keydown","focusin","focusout"].indexOf(event) > -1;
	}
	,attachToElement: function(event) {
		var hasMethod = this.jsel.addEventListener != null;
		switch(event) {
		case "click":
			this.jsel.onclick = $bind(this,this.on_mouse_click);
			break;
		case "focusin":
			this.jqel.on("focusin",null,$bind(this,this.on_focus_in));
			break;
		case "focusout":
			this.jqel.on("focusout",null,$bind(this,this.on_focus_out));
			break;
		case "keydown":
			this.jqel.on("keydown",null,$bind(this,this.on_keyboard_down));
			break;
		case "keyup":
			this.jqel.on("keyup",null,$bind(this,this.on_keyboard_up));
			break;
		case "mousedown":
			this.jsel.onmousedown = $bind(this,this.on_mouse_down);
			break;
		case "mouseenter":
			this.jsel.onmouseenter = $bind(this,this.on_mouse_enter);
			break;
		case "mouseleave":
			this.jsel.onmouseleave = $bind(this,this.on_mouse_leave);
			break;
		case "mousemove":
			this.jsel.onmousemove = $bind(this,this.on_mouse_move);
			break;
		case "mouseup":
			this.jsel.onmouseup = $bind(this,this.on_mouse_up);
			break;
		case "prievent_base_scroll":
			this.jsel.onscroll = $bind(this,this.on_scroll);
			break;
		case "touchdown":
			if(hasMethod) {
				this.jsel.addEventListener("touchstart",$bind(this,this.on_touch_down));
			}
			break;
		case "touchmove":
			if(hasMethod) {
				this.jsel.addEventListener("touchmove",$bind(this,this.on_touch_move));
			}
			break;
		case "touchup":
			if(hasMethod) {
				this.jsel.addEventListener("touchend",$bind(this,this.on_touch_up));
			}
			break;
		}
	}
	,dettachFromElement: function(event) {
		var hasMethod = this.jsel.removeEventListener != null;
		switch(event) {
		case "click":
			this.jsel.onclick = null;
			break;
		case "focusin":
			this.jqel.off("focusin",null,$bind(this,this.on_focus_in));
			break;
		case "focusout":
			this.jqel.off("focusout",null,$bind(this,this.on_focus_out));
			break;
		case "keydown":
			this.jqel.off("keydown",null,$bind(this,this.on_keyboard_down));
			break;
		case "keyup":
			this.jqel.off("keyup",null,$bind(this,this.on_keyboard_up));
			break;
		case "mousedown":
			this.jsel.onmousedown = null;
			break;
		case "mouseenter":
			this.jsel.onmouseenter = null;
			break;
		case "mouseleave":
			this.jsel.onmouseleave = null;
			break;
		case "mousemove":
			this.jsel.onmousemove = null;
			break;
		case "mouseup":
			this.jsel.onmouseup = null;
			break;
		case "prievent_base_scroll":
			this.jsel.onscroll = null;
			break;
		case "touchdown":
			if(hasMethod) {
				this.jsel.removeEventListener("touchstart",$bind(this,this.on_touch_down));
			}
			break;
		case "touchmove":
			if(hasMethod) {
				this.jsel.removeEventListener("touchmove",$bind(this,this.on_touch_move));
			}
			break;
		case "touchup":
			if(hasMethod) {
				this.jsel.removeEventListener("touchend",$bind(this,this.on_touch_up));
			}
			break;
		}
	}
	,on_scroll: function(e) {
		e.stopPropagation();
		this.display.dispatchEvent(new priori_event_PriEvent("prievent_base_scroll"));
	}
	,on_focus_in: function(e) {
		if(!this.display.get_visible() || this.display.get_disabled()) {
			return;
		}
		var pe = new priori_event_PriFocusEvent("focusin");
		this.display.dispatchEvent(pe);
	}
	,on_focus_out: function(e) {
		if(!this.display.get_visible() || this.display.get_disabled()) {
			return;
		}
		var pe = new priori_event_PriFocusEvent("focusout");
		this.display.dispatchEvent(pe);
	}
	,on_keyboard_up: function(e) {
		if(this.display.get_disabled()) {
			return;
		}
		var pe = new priori_event_PriKeyboardEvent("keyup");
		pe.__real = e.originalEvent;
		pe.key = e.key;
		pe.keycode = e.which;
		pe.altKey = e.altKey;
		pe.ctrlKey = e.ctrlKey;
		pe.shiftKey = e.shiftKey;
		pe.metaKey = e.metaKey;
		this.display.dispatchEvent(pe);
	}
	,on_keyboard_down: function(e) {
		if(this.display.get_disabled()) {
			return;
		}
		var pe = new priori_event_PriKeyboardEvent("keydown");
		pe.__real = e.originalEvent;
		pe.key = e.key;
		pe.keycode = e.which;
		pe.altKey = e.altKey;
		pe.ctrlKey = e.ctrlKey;
		pe.shiftKey = e.shiftKey;
		pe.metaKey = e.metaKey;
		this.display.dispatchEvent(pe);
	}
	,on_touch_down: function(e) {
		if(this.display.get_disabled()) {
			return;
		}
		e.stopPropagation();
		var pe = new priori_event_PriTapEvent("touchdown");
		pe.__real = e;
		pe.altKey = pe.__real.altKey;
		pe.ctrlKey = pe.__real.ctrlKey;
		pe.shiftKey = pe.__real.shiftKey;
		pe.metaKey = pe.__real.metaKey;
		this.display.dispatchEvent(pe);
	}
	,on_touch_up: function(e) {
		if(this.display.get_disabled()) {
			return;
		}
		e.stopPropagation();
		var pe = new priori_event_PriTapEvent("touchup");
		pe.__real = e;
		pe.altKey = pe.__real.altKey;
		pe.ctrlKey = pe.__real.ctrlKey;
		pe.shiftKey = pe.__real.shiftKey;
		pe.metaKey = pe.__real.metaKey;
		this.display.dispatchEvent(pe);
	}
	,on_touch_move: function(e) {
		if(this.display.get_disabled()) {
			return;
		}
		e.stopPropagation();
		var pe = new priori_event_PriTapEvent("touchmove");
		pe.__real = e;
		pe.altKey = pe.__real.altKey;
		pe.ctrlKey = pe.__real.ctrlKey;
		pe.shiftKey = pe.__real.shiftKey;
		pe.metaKey = pe.__real.metaKey;
		this.display.dispatchEvent(pe);
	}
	,on_mouse_down: function(e) {
		if(this.display.get_disabled()) {
			return;
		}
		e.stopPropagation();
		var pe = new priori_event_PriTapEvent("mousedown");
		pe.__real = e;
		pe.altKey = pe.__real.altKey;
		pe.ctrlKey = pe.__real.ctrlKey;
		pe.shiftKey = pe.__real.shiftKey;
		pe.metaKey = pe.__real.metaKey;
		this.display.dispatchEvent(pe);
	}
	,on_mouse_up: function(e) {
		if(this.display.get_disabled()) {
			return;
		}
		e.stopPropagation();
		var pe = new priori_event_PriTapEvent("mouseup");
		pe.__real = e;
		pe.altKey = pe.__real.altKey;
		pe.ctrlKey = pe.__real.ctrlKey;
		pe.shiftKey = pe.__real.shiftKey;
		pe.metaKey = pe.__real.metaKey;
		this.display.dispatchEvent(pe);
	}
	,on_mouse_click: function(e) {
		if(this.display.get_disabled()) {
			return;
		}
		e.stopPropagation();
		var pe = new priori_event_PriTapEvent("click");
		pe.__real = e;
		pe.altKey = pe.__real.altKey;
		pe.ctrlKey = pe.__real.ctrlKey;
		pe.shiftKey = pe.__real.shiftKey;
		pe.metaKey = pe.__real.metaKey;
		this.display.dispatchEvent(pe);
	}
	,on_mouse_enter: function(e) {
		if(this.display.get_disabled()) {
			return;
		}
		var pe = new priori_event_PriMouseEvent("mouseenter");
		pe.__real = e;
		pe.altKey = pe.__real.altKey;
		pe.ctrlKey = pe.__real.ctrlKey;
		pe.shiftKey = pe.__real.shiftKey;
		pe.metaKey = pe.__real.metaKey;
		this.display.dispatchEvent(pe);
	}
	,on_mouse_leave: function(e) {
		if(this.display.get_disabled()) {
			return;
		}
		var pe = new priori_event_PriMouseEvent("mouseleave");
		pe.__real = e;
		pe.altKey = pe.__real.altKey;
		pe.ctrlKey = pe.__real.ctrlKey;
		pe.shiftKey = pe.__real.shiftKey;
		pe.metaKey = pe.__real.metaKey;
		this.display.dispatchEvent(pe);
	}
	,on_mouse_move: function(e) {
		if(this.display.get_disabled()) {
			return;
		}
		var pe = new priori_event_PriMouseEvent("mousemove");
		pe.__real = e;
		pe.altKey = pe.__real.altKey;
		pe.ctrlKey = pe.__real.ctrlKey;
		pe.shiftKey = pe.__real.shiftKey;
		pe.metaKey = pe.__real.metaKey;
		this.display.dispatchEvent(pe);
	}
	,kill: function() {
		this.removeAllActions();
		this.registeredEvent = [];
		this.display.removeEventListener("prievent_base_removedFromApp",$bind(this,this.onRemovedFromApp));
		this.display.removeEventListener("prievent_base_addedToApp",$bind(this,this.onAddedToApp));
	}
	,__class__: helper_browser_BrowserEventEngine
};
var priori_system_PriDevice = function() { };
priori_system_PriDevice.__name__ = "priori.system.PriDevice";
priori_system_PriDevice.browser = function() {
	if(priori_system_PriDevice._detectedBrowser == null) {
		var navigator = $global.navigator;
		var userAgent = navigator.userAgent;
		if(userAgent.toLowerCase().indexOf("edge") > -1) {
			priori_system_PriDevice._detectedBrowser = priori_system_PriDeviceBrowser.EDGE;
		} else if(userAgent.toLowerCase().indexOf("chrome") > -1) {
			priori_system_PriDevice._detectedBrowser = priori_system_PriDeviceBrowser.CHROME;
		} else if(userAgent.toLowerCase().indexOf("safari") > -1) {
			priori_system_PriDevice._detectedBrowser = priori_system_PriDeviceBrowser.SAFARI;
		} else if(userAgent.toLowerCase().indexOf("opera") > -1) {
			priori_system_PriDevice._detectedBrowser = priori_system_PriDeviceBrowser.OPERA;
		} else if(userAgent.toLowerCase().indexOf("webkit") > -1) {
			priori_system_PriDevice._detectedBrowser = priori_system_PriDeviceBrowser.WEBKIT;
		} else if(userAgent.toLowerCase().indexOf("firefox") > -1) {
			priori_system_PriDevice._detectedBrowser = priori_system_PriDeviceBrowser.MOZILLA;
		} else if(userAgent.toLowerCase().indexOf("msie") > -1) {
			priori_system_PriDevice._detectedBrowser = priori_system_PriDeviceBrowser.MSIE;
		} else {
			priori_system_PriDevice._detectedBrowser = priori_system_PriDeviceBrowser.MSIE;
		}
	}
	return priori_system_PriDevice._detectedBrowser;
};
priori_system_PriDevice.deviceSystem = function() {
	var navigator = $global.navigator;
	var userAgent = navigator.userAgent;
	if(userAgent.indexOf("Macintosh") > -1) {
		return priori_system_PriDeviceSystem.MAC;
	} else if(new EReg("Android","i").match(userAgent)) {
		return priori_system_PriDeviceSystem.ANDROID;
	} else if(new EReg("BlackBerry","i").match(userAgent)) {
		return priori_system_PriDeviceSystem.BLACKBERRY;
	} else if(new EReg("iPhone|iPad|iPod","i").match(userAgent)) {
		return priori_system_PriDeviceSystem.IOS;
	} else if(new EReg("Opera Mini","i").match(userAgent)) {
		return priori_system_PriDeviceSystem.OPERAMINI;
	} else if(new EReg("IEMobile|WPDesktop","i").match(userAgent)) {
		return priori_system_PriDeviceSystem.WINDOWSMOBILE;
	} else if(userAgent.indexOf("Linux") > -1) {
		return priori_system_PriDeviceSystem.LINUX;
	} else if(userAgent.indexOf("Windows") > -1) {
		return priori_system_PriDeviceSystem.WINDOWS;
	}
	return priori_system_PriDeviceSystem.UNKNOW;
};
priori_system_PriDevice.isMobileDevice = function() {
	var system = priori_system_PriDevice.deviceSystem();
	if(system == priori_system_PriDeviceSystem.ANDROID || system == priori_system_PriDeviceSystem.IOS || system == priori_system_PriDeviceSystem.BLACKBERRY || system == priori_system_PriDeviceSystem.OPERAMINI || system == priori_system_PriDeviceSystem.WINDOWSMOBILE) {
		return true;
	}
	return false;
};
var priori_system_PriDeviceBrowser = $hxEnums["priori.system.PriDeviceBrowser"] = { __ename__:true,__constructs__:null
	,SAFARI: {_hx_name:"SAFARI",_hx_index:0,__enum__:"priori.system.PriDeviceBrowser",toString:$estr}
	,WEBKIT: {_hx_name:"WEBKIT",_hx_index:1,__enum__:"priori.system.PriDeviceBrowser",toString:$estr}
	,OPERA: {_hx_name:"OPERA",_hx_index:2,__enum__:"priori.system.PriDeviceBrowser",toString:$estr}
	,MSIE: {_hx_name:"MSIE",_hx_index:3,__enum__:"priori.system.PriDeviceBrowser",toString:$estr}
	,EDGE: {_hx_name:"EDGE",_hx_index:4,__enum__:"priori.system.PriDeviceBrowser",toString:$estr}
	,MOZILLA: {_hx_name:"MOZILLA",_hx_index:5,__enum__:"priori.system.PriDeviceBrowser",toString:$estr}
	,CHROME: {_hx_name:"CHROME",_hx_index:6,__enum__:"priori.system.PriDeviceBrowser",toString:$estr}
	,UNKNOW: {_hx_name:"UNKNOW",_hx_index:7,__enum__:"priori.system.PriDeviceBrowser",toString:$estr}
};
priori_system_PriDeviceBrowser.__constructs__ = [priori_system_PriDeviceBrowser.SAFARI,priori_system_PriDeviceBrowser.WEBKIT,priori_system_PriDeviceBrowser.OPERA,priori_system_PriDeviceBrowser.MSIE,priori_system_PriDeviceBrowser.EDGE,priori_system_PriDeviceBrowser.MOZILLA,priori_system_PriDeviceBrowser.CHROME,priori_system_PriDeviceBrowser.UNKNOW];
var helper_browser_BrowserHandler = function() { };
helper_browser_BrowserHandler.__name__ = "helper.browser.BrowserHandler";
helper_browser_BrowserHandler.getMinFloat = function() {
	switch(priori_system_PriDevice.browser()._hx_index) {
	case 0:case 1:case 2:case 6:
		return 0.0001;
	default:
		return 0.01;
	}
};
var helper_browser_DomHelper = function() { };
helper_browser_DomHelper.__name__ = "helper.browser.DomHelper";
helper_browser_DomHelper.disableAll = function(el) {
	el.setAttribute("disabled","disabled");
	if(el.children != null) {
		var _g = 0;
		var _g1 = el.children.length;
		while(_g < _g1) {
			var i = _g++;
			helper_browser_DomHelper.disableAll(el.children.item(i));
		}
	}
};
helper_browser_DomHelper.enableAllUpPrioriDisabled = function(el) {
	if(!el.hasAttribute("priori-disabled")) {
		el.removeAttribute("disabled");
		if(el.children != null) {
			var _g = 0;
			var _g1 = el.children.length;
			while(_g < _g1) {
				var i = _g++;
				helper_browser_DomHelper.enableAllUpPrioriDisabled(el.children.item(i));
			}
		}
	}
};
helper_browser_DomHelper.hasChild = function(el,seekChild) {
	if(el == seekChild) {
		return true;
	} else if(el.children != null) {
		var _g = 0;
		var _g1 = el.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(helper_browser_DomHelper.hasChild(el.children.item(i),seekChild)) {
				return true;
			}
		}
	}
	return false;
};
helper_browser_DomHelper.getBoundingClientRect = function(el) {
	try {
		var domRect = el.getBoundingClientRect();
		return new priori_geom_PriGeomBox(domRect.x,domRect.y,domRect.width,domRect.height);
	} catch( _g ) {
		return new priori_geom_PriGeomBox();
	}
};
helper_browser_DomHelper.borderUpdate = function(borderElement,displayHelper) {
	if(borderElement != null && displayHelper.jselement != null) {
		borderElement.style.borderRadius = displayHelper.jselement.style.borderRadius;
		borderElement.style.zIndex = displayHelper.jselement.style.zIndex;
	}
};
helper_browser_DomHelper.apply2dTransformation = function(styleMap,sx,sy,rot,anchorX,anchorY) {
	var browser = priori_system_PriDevice.browser();
	var keyOrigin = "";
	var keyTranform = "";
	if(browser == priori_system_PriDeviceBrowser.CHROME || browser == priori_system_PriDeviceBrowser.WEBKIT) {
		keyOrigin = "-webkit-transform-origin";
		keyTranform = "-webkit-transform";
	} else if(browser == priori_system_PriDeviceBrowser.MSIE) {
		keyOrigin = "-ms-transform-origin";
		keyTranform = "-ms-transform";
	}
	anchorX *= 100;
	anchorY *= 100;
	var valOrigin = "";
	var valMatrix = "";
	if((sx != 1 || sy != 1) && rot == 0) {
		valOrigin = "" + anchorX + "% " + anchorY + "%";
		valMatrix = "matrix(" + sx + ", 0, 0, " + sy + ", 0, 0)";
	} else if(sx != 1 || sy != 1 || rot != 0) {
		var angle = rot * 0.017453292519943295;
		var aSin = Math.sin(angle);
		var aCos = Math.cos(angle);
		var m1 = [[aCos,-aSin,0],[aSin,aCos,0],[0,0,1]];
		var m2_2;
		var m2_1;
		var m2_0 = [sx,0,0];
		m2_1 = [0,sy,0];
		m2_2 = [0,0,1];
		var calc = function(row,col) {
			return m1[row][0] * m2_0[col] + m1[row][1] * m2_1[col] + m1[row][2] * m2_2[col];
		};
		valOrigin = "" + anchorX + "% " + anchorY + "%";
		valMatrix = "matrix(" + calc(0,0) + ", " + calc(1,0) + ", " + calc(0,1) + ", " + calc(1,1) + ", " + calc(0,2) + ", " + calc(1,2) + ")";
	}
	if(valOrigin.length == 0) {
		styleMap.remove("transform-origin");
		if(keyOrigin.length > 0) {
			styleMap.remove(keyOrigin);
		}
	} else {
		styleMap.set("transform-origin",valOrigin);
		styleMap.set(keyOrigin,valOrigin);
	}
	if(valMatrix.length == 0) {
		styleMap.remove("transform");
		styleMap.remove(keyTranform);
	} else {
		styleMap.set("transform",valMatrix);
		styleMap.set(keyTranform,valMatrix);
	}
};
var helper_browser_StyleHelper = function() { };
helper_browser_StyleHelper.__name__ = "helper.browser.StyleHelper";
helper_browser_StyleHelper.applyFontStyleDirect = function(element,style) {
	if(style == null) {
		element.style.fontFamily = null;
		element.style.fontWeight = null;
		element.style.fontStyle = null;
		element.style.textAlign = null;
		element.style.color = null;
		element.style.textDecoration = null;
		element.style.fontVariant = null;
		element.style.textTransform = null;
	} else {
		element.style.fontFamily = style.family;
		element.style.fontWeight = style.weight;
		element.style.fontStyle = style.italic;
		element.style.textAlign = style.align;
		element.style.color = priori_geom_PriColor.toString(style.color);
		element.style.textDecoration = style.decoration;
		if(style.variant == null) {
			element.style.fontVariant = null;
			element.style.textTransform = null;
		} else if(style.variant == "all-caps") {
			element.style.textTransform = "uppercase";
			element.style.fontVariant = null;
		} else {
			element.style.textTransform = null;
			element.style.fontVariant = style.variant;
		}
	}
};
helper_browser_StyleHelper.applyCleanFontStyleDirect = function(element) {
	helper_browser_StyleHelper.applyFontStyleDirect(element,priori_style_font_PriFontStyle.getFontStyleObjectBase());
};
helper_browser_StyleHelper.applyFontStyle = function(styles,value) {
	if(value == null) {
		styles.remove("color");
		styles.remove("font-family");
		styles.remove("font-weight");
		styles.remove("font-style");
		styles.remove("text-align");
		styles.remove("text-decoration");
		styles.remove("font-variant");
		styles.remove("text-transform");
	} else {
		styles.set("font-family",value.family);
		styles.set("font-weight",value.weight == null ? null : value.weight);
		styles.set("font-style",value.italic == null ? null : value.italic);
		styles.set("text-align",value.align == null ? null : value.align);
		styles.set("color",value.color == null ? null : priori_geom_PriColor.toString(value.color));
		styles.set("text-decoration",value.decoration == null ? null : value.decoration);
		if(value.variant == null) {
			styles.remove("font-variant");
			styles.remove("text-transform");
		} else if(value.variant == "all-caps") {
			styles.set("text-transform","uppercase");
			styles.remove("font-variant");
		} else {
			styles.remove("text-transform");
			styles.set("font-variant",value.variant);
		}
	}
};
var helper_display_PriMap = function() {
	this.map = new haxe_ds_StringMap();
	this.transition = new haxe_ds_StringMap();
};
helper_display_PriMap.__name__ = "helper.display.PriMap";
helper_display_PriMap.prototype = {
	set: function(key,value) {
		if(value == null || value.length == 0) {
			this.remove(key);
		} else if(this.map.h[key] != value) {
			this.map.h[key] = value;
			this.cache = null;
		}
	}
	,setTransition: function(key,seconds) {
		if(seconds == null || seconds <= 0) {
			var _this = this.transition;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
			this.cache = null;
		} else if(this.transition.h[key] != seconds + "s") {
			this.transition.h[key] = seconds + "s";
			this.cache = null;
		}
	}
	,remove: function(key) {
		if(!Object.prototype.hasOwnProperty.call(this.map.h,key)) {
			return;
		}
		this.cache = null;
		var _this = this.map;
		if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
			delete(_this.h[key]);
		}
	}
	,getValue: function() {
		if(this.cache != null) {
			return this.cache;
		}
		var c = "";
		var h = this.map.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			c += key + ":" + this.map.h[key] + ";";
		}
		var t = "";
		var h = this.transition.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			t = t + (t.length > 0 ? "," : "") + key + " " + this.transition.h[key];
		}
		if(t.length > 0) {
			c += "transition:" + t + ";";
			c += "-webkit-transition:" + t + ";";
		}
		this.cache = c;
		return c;
	}
	,__class__: helper_display_PriMap
};
var helper_display_DisplayHelperIgnition = function() { };
helper_display_DisplayHelperIgnition.__name__ = "helper.display.DisplayHelperIgnition";
helper_display_DisplayHelperIgnition.getDisplayTextHelper = function() {
	return { text : "", html : "", fontSize : 14, autoSize : true, multiLine : false, selectable : false, ellipsis : true, editable : false, lineHeight : null, letterSpace : null, textColor : null, fontFamily : null, weight : null, italic : null, variant : null, align : null, decoration : null};
};
helper_display_DisplayHelperIgnition.getDisplayHerlper = function() {
	var map = new helper_display_PriMap();
	map.set("left","0px");
	map.set("top","0px");
	map.set("width","100px");
	map.set("height","100px");
	map.set("overflow","hidden");
	map.set("z-index","1000");
	return { bgColor : null, x : 0, y : 0, width : 100, height : 100, clipping : true, depth : 1000, pointer : false, focusable : false, visible : true, mouseEnabled : true, anchorX : 0.5, anchorY : 0.5, rotation : 0, scaleX : 1, scaleY : 1, alpha : 1, disabled : false, eventHelper : new helper_browser_BrowserEventEngine(), styles : map, styleString : "", holdStyleUpdate : false};
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_jquery_JqEltsIterator = function(j) {
	this.i = 0;
	this.j = j;
};
js_jquery_JqEltsIterator.__name__ = "js.jquery.JqEltsIterator";
js_jquery_JqEltsIterator.prototype = {
	hasNext: function() {
		return this.i < this.j.length;
	}
	,next: function() {
		return $(this.j[this.i++]);
	}
	,__class__: js_jquery_JqEltsIterator
};
var js_jquery_JqIterator = function(j) {
	this.i = 0;
	this.j = j;
};
js_jquery_JqIterator.__name__ = "js.jquery.JqIterator";
js_jquery_JqIterator.prototype = {
	hasNext: function() {
		return this.i < this.j.length;
	}
	,next: function() {
		return this.j[this.i++];
	}
	,__class__: js_jquery_JqIterator
};
var priori_assets_Asset = function(id,url) {
	priori_event_PriEventDispatcher.call(this);
	this.id = id;
	this.url = url;
};
priori_assets_Asset.__name__ = "priori.assets.Asset";
priori_assets_Asset.__super__ = priori_event_PriEventDispatcher;
priori_assets_Asset.prototype = $extend(priori_event_PriEventDispatcher.prototype,{
	load: function() {
	}
	,getElement: function() {
		return $();
	}
	,__class__: priori_assets_Asset
});
var priori_assets_AssetManager = function() {
	this._totalErrors = 0;
	this.maxError = 10;
	this.loadedList = [];
	this.queueList = [];
	priori_event_PriEventDispatcher.call(this);
	if(priori_assets_AssetManager._g != null) {
		throw haxe_Exception.thrown("Use static g()");
	}
	this._isLoading = false;
	this._isLoaded = false;
};
priori_assets_AssetManager.__name__ = "priori.assets.AssetManager";
priori_assets_AssetManager.g = function() {
	if(priori_assets_AssetManager._g == null) {
		priori_assets_AssetManager._g = new priori_assets_AssetManager();
	}
	return priori_assets_AssetManager._g;
};
priori_assets_AssetManager.__super__ = priori_event_PriEventDispatcher;
priori_assets_AssetManager.prototype = $extend(priori_event_PriEventDispatcher.prototype,{
	getAsset: function(id) {
		var i = 0;
		var n = this.loadedList.length;
		var result = null;
		while(i < n) {
			if(this.loadedList[i].id == id) {
				result = this.loadedList[i];
			}
			++i;
		}
		return result;
	}
	,addToQueue: function(asset) {
		if(this.queueList.indexOf(asset) == -1 && this.loadedList.indexOf(asset) == -1) {
			asset.addEventListener("prievent_base_complete",$bind(this,this.onAssetComplete));
			asset.addEventListener("prievent_base_error",$bind(this,this.onAssetError));
			this.queueList.push(asset);
		}
	}
	,load: function() {
		if(this._isLoaded == false && this._isLoading == false) {
			this._totalErrors = 0;
			this.tryLoadNextAsset();
		}
	}
	,tryLoadNextAsset: function() {
		if(this.queueList.length == 0) {
			this._isLoading = false;
			this._isLoaded = true;
			this.dispatchEvent(new priori_assets_AssetManagerEvent(priori_assets_AssetManagerEvent.ASSET_COMPLETE,this.getPercentCompleted()));
		} else {
			this.queueList[0].load();
		}
	}
	,getPercentCompleted: function() {
		var total = this.queueList.length + this.loadedList.length;
		var loaded = this.loadedList.length;
		var percent;
		if(total == 0) {
			percent = 1;
		} else {
			percent = loaded / total;
		}
		return percent;
	}
	,onAssetComplete: function(e) {
		var asset = js_Boot.__cast(e.currentTarget , priori_assets_Asset);
		HxOverrides.remove(this.queueList,asset);
		this.loadedList.push(asset);
		asset.removeEventListener("prievent_base_complete",$bind(this,this.onAssetComplete));
		asset.removeEventListener("prievent_base_error",$bind(this,this.onAssetError));
		this.dispatchEvent(new priori_assets_AssetManagerEvent(priori_assets_AssetManagerEvent.ASSET_PROGRESS,this.getPercentCompleted()));
		this.tryLoadNextAsset();
	}
	,onAssetError: function(e) {
		var asset = js_Boot.__cast(e.currentTarget , priori_assets_Asset);
		this._totalErrors++;
		if(this._totalErrors < this.maxError) {
			HxOverrides.remove(this.queueList,asset);
			this.queueList.push(asset);
			this.tryLoadNextAsset();
		} else {
			this._isLoaded = false;
			this._isLoading = false;
			this.dispatchEvent(new priori_assets_AssetManagerEvent(priori_assets_AssetManagerEvent.ASSET_ERROR,this.getPercentCompleted()));
		}
	}
	,__class__: priori_assets_AssetManager
});
var priori_event_PriEvent = function(type,propagate,bubble,data) {
	if(bubble == null) {
		bubble = false;
	}
	if(propagate == null) {
		propagate = false;
	}
	if(propagate == null) {
		propagate = false;
	}
	if(bubble == null) {
		bubble = false;
	}
	this.type = type;
	this.propagate = propagate;
	this.bubble = bubble;
	this.data = data;
};
priori_event_PriEvent.__name__ = "priori.event.PriEvent";
priori_event_PriEvent.prototype = {
	stopBubble: function() {
		this.bubble = false;
	}
	,stopPropagation: function() {
		this.propagate = false;
	}
	,clone: function() {
		var clone = new priori_event_PriEvent(this.type,this.propagate,this.bubble,this.data);
		clone.target = this.target;
		clone.currentTarget = this.currentTarget;
		return clone;
	}
	,__class__: priori_event_PriEvent
};
var priori_assets_AssetManagerEvent = function(type,percentLoaded) {
	priori_event_PriEvent.call(this,type);
	this.percentLoaded = percentLoaded;
};
priori_assets_AssetManagerEvent.__name__ = "priori.assets.AssetManagerEvent";
priori_assets_AssetManagerEvent.__super__ = priori_event_PriEvent;
priori_assets_AssetManagerEvent.prototype = $extend(priori_event_PriEvent.prototype,{
	clone: function() {
		var clone = new priori_assets_AssetManagerEvent(this.type,this.percentLoaded);
		clone.target = this.target;
		clone.currentTarget = this.currentTarget;
		clone.data = null;
		return clone;
	}
	,__class__: priori_assets_AssetManagerEvent
});
var priori_event_PriFocusEvent = function(type,propagate,bubble,data) {
	if(bubble == null) {
		bubble = false;
	}
	if(propagate == null) {
		propagate = false;
	}
	priori_event_PriEvent.call(this,type,propagate,bubble,data);
};
priori_event_PriFocusEvent.__name__ = "priori.event.PriFocusEvent";
priori_event_PriFocusEvent.__super__ = priori_event_PriEvent;
priori_event_PriFocusEvent.prototype = $extend(priori_event_PriEvent.prototype,{
	clone: function() {
		var clone = new priori_event_PriFocusEvent(this.type,this.propagate,this.bubble);
		clone.target = this.target;
		clone.currentTarget = this.currentTarget;
		clone.data = this.data;
		return clone;
	}
	,__class__: priori_event_PriFocusEvent
});
var priori_event_PriKeyboardEvent = function(type,propagate,bubble,data) {
	if(bubble == null) {
		bubble = false;
	}
	if(propagate == null) {
		propagate = false;
	}
	priori_event_PriEvent.call(this,type,propagate,bubble,data);
};
priori_event_PriKeyboardEvent.__name__ = "priori.event.PriKeyboardEvent";
priori_event_PriKeyboardEvent.__super__ = priori_event_PriEvent;
priori_event_PriKeyboardEvent.prototype = $extend(priori_event_PriEvent.prototype,{
	preventDefault: function() {
		this.__real.preventDefault();
	}
	,clone: function() {
		var clone = new priori_event_PriKeyboardEvent(this.type,this.propagate,this.bubble);
		clone.__real = this.__real;
		clone.target = this.target;
		clone.currentTarget = this.currentTarget;
		clone.data = this.data;
		clone.key = this.key;
		clone.keycode = this.keycode;
		clone.altKey = this.altKey;
		clone.ctrlKey = this.ctrlKey;
		clone.shiftKey = this.shiftKey;
		clone.metaKey = this.metaKey;
		return clone;
	}
	,toString: function() {
		return JSON.stringify({ key : this.key, keyCode : this.keycode, altKey : this.altKey, ctrlKey : this.ctrlKey, shiftKey : this.shiftKey});
	}
	,__class__: priori_event_PriKeyboardEvent
});
var priori_event_PriMouseEvent = function(type,propagate,bubble,data) {
	if(bubble == null) {
		bubble = false;
	}
	if(propagate == null) {
		propagate = false;
	}
	priori_event_PriEvent.call(this,type,propagate,bubble,data);
};
priori_event_PriMouseEvent.__name__ = "priori.event.PriMouseEvent";
priori_event_PriMouseEvent.__super__ = priori_event_PriEvent;
priori_event_PriMouseEvent.prototype = $extend(priori_event_PriEvent.prototype,{
	preventDefault: function() {
		this.__real.preventDefault();
	}
	,clone: function() {
		var clone = new priori_event_PriMouseEvent(this.type,this.propagate,this.bubble);
		clone.__real = this.__real;
		clone.target = this.target;
		clone.currentTarget = this.currentTarget;
		clone.data = this.data;
		clone.altKey = this.altKey;
		clone.shiftKey = this.shiftKey;
		clone.ctrlKey = this.ctrlKey;
		clone.metaKey = this.metaKey;
		return clone;
	}
	,__class__: priori_event_PriMouseEvent
});
var priori_event_PriTapEvent = function(type,propagate,bubble,data) {
	if(bubble == null) {
		bubble = false;
	}
	if(propagate == null) {
		propagate = false;
	}
	priori_event_PriMouseEvent.call(this,type,propagate,bubble,data);
};
priori_event_PriTapEvent.__name__ = "priori.event.PriTapEvent";
priori_event_PriTapEvent.__super__ = priori_event_PriMouseEvent;
priori_event_PriTapEvent.prototype = $extend(priori_event_PriMouseEvent.prototype,{
	clone: function() {
		var clone = new priori_event_PriTapEvent(this.type,this.propagate,this.bubble);
		clone.__real = this.__real;
		clone.target = this.target;
		clone.currentTarget = this.currentTarget;
		clone.data = this.data;
		clone.altKey = this.altKey;
		clone.shiftKey = this.shiftKey;
		clone.ctrlKey = this.ctrlKey;
		clone.metaKey = this.metaKey;
		return clone;
	}
	,__class__: priori_event_PriTapEvent
});
var priori_geom_PriColor = {};
priori_geom_PriColor._new = function(color) {
	if(color == null) {
		color = 0;
	}
	return color;
};
priori_geom_PriColor.mixWith = function(this1,color,percent) {
	if(percent == null) {
		percent = 0.5;
	}
	if(percent == null || percent < 0) {
		percent = 0;
	}
	if(percent > 1) {
		percent = 1;
	}
	var nr = (this1 >> 16 & 255) + Math.round(((color >> 16 & 255) - (this1 >> 16 & 255)) * percent);
	var ng = (this1 >> 8 & 255) + Math.round(((color >> 8 & 255) - (this1 >> 8 & 255)) * percent);
	var nb = (this1 & 255) + Math.round(((color & 255) - (this1 & 255)) * percent);
	var R = nr << 16;
	var G = ng << 8;
	var B = nb;
	this1 = R | G | B;
};
priori_geom_PriColor.mix = function(this1,withColor,percent) {
	if(percent == null) {
		percent = 0.5;
	}
	if(percent == null || percent < 0) {
		percent = 0;
	}
	if(percent > 1) {
		percent = 1;
	}
	var nr = (this1 >> 16 & 255) + Math.round(((withColor >> 16 & 255) - (this1 >> 16 & 255)) * percent);
	var ng = (this1 >> 8 & 255) + Math.round(((withColor >> 8 & 255) - (this1 >> 8 & 255)) * percent);
	var nb = (this1 & 255) + Math.round(((withColor & 255) - (this1 & 255)) * percent);
	var color = nr << 16 | ng << 8 | nb;
	if(color == null) {
		color = 0;
	}
	return color;
};
priori_geom_PriColor.get_red = function(this1) {
	return this1 >> 16 & 255;
};
priori_geom_PriColor.set_red = function(this1,value) {
	var g = this1 >> 8 & 255;
	var b = this1 & 255;
	var R = value << 16;
	var G = g << 8;
	var B = b;
	this1 = R | G | B;
	return value;
};
priori_geom_PriColor.get_green = function(this1) {
	return this1 >> 8 & 255;
};
priori_geom_PriColor.set_green = function(this1,value) {
	var r = this1 >> 16 & 255;
	var b = this1 & 255;
	var R = r << 16;
	var G = value << 8;
	var B = b;
	this1 = R | G | B;
	return value;
};
priori_geom_PriColor.get_blue = function(this1) {
	return this1 & 255;
};
priori_geom_PriColor.set_blue = function(this1,value) {
	var r = this1 >> 16 & 255;
	var g = this1 >> 8 & 255;
	var R = r << 16;
	var G = g << 8;
	var B = value;
	this1 = R | G | B;
	return value;
};
priori_geom_PriColor.updateColor = function(this1,r,g,b) {
	var R = r << 16;
	var G = g << 8;
	var B = b;
	this1 = R | G | B;
	return this1;
};
priori_geom_PriColor.toString = function(this1) {
	return "#" + StringTools.hex(this1,6);
};
priori_geom_PriColor.fromString = function(rgb) {
	if(rgb.charAt(0) == "#") {
		rgb = "0x" + rgb.substring(1);
	}
	var colorInt = Std.parseInt(rgb);
	if(colorInt == null) {
		colorInt = 0;
	}
	var color = colorInt;
	if(color == null) {
		color = 0;
	}
	return color;
};
var priori_geom_PriGeomBox = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.height = height;
	this.width = width;
};
priori_geom_PriGeomBox.__name__ = "priori.geom.PriGeomBox";
priori_geom_PriGeomBox.prototype = {
	__class__: priori_geom_PriGeomBox
};
var priori_geom_PriGeomPoint = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
priori_geom_PriGeomPoint.__name__ = "priori.geom.PriGeomPoint";
priori_geom_PriGeomPoint.prototype = {
	distanceFrom: function(point) {
		return Math.sqrt(Math.pow(point.x - this.x,2) + Math.pow(point.y - this.y,2));
	}
	,clone: function() {
		return new priori_geom_PriGeomPoint(this.x,this.y);
	}
	,__class__: priori_geom_PriGeomPoint
};
var priori_style_border_PriBorderStyle = function(width,color,type) {
	if(color == null) {
		color = 13421772;
	}
	if(width == null) {
		width = 1;
	}
	this.width = width;
	this.color = color;
	this.type = type == null ? priori_style_border_PriBorderType.SOLID : type;
};
priori_style_border_PriBorderStyle.__name__ = "priori.style.border.PriBorderStyle";
priori_style_border_PriBorderStyle.prototype = {
	setColor: function(color) {
		this.color = color;
		return this;
	}
	,setType: function(type) {
		this.type = type;
		return this;
	}
	,setWidth: function(width) {
		this.width = width;
		return this;
	}
	,toString: function() {
		var styleString = "";
		if(this.type == priori_style_border_PriBorderType.SOLID) {
			styleString = "solid";
		} else if(this.type == priori_style_border_PriBorderType.DOTTED) {
			styleString = "dotted";
		} else if(this.type == priori_style_border_PriBorderType.DASHED) {
			styleString = "dashed";
		}
		var result = priori_geom_PriColor.toString(this.color) + " " + styleString + " " + this.width + "px ";
		return result;
	}
	,__class__: priori_style_border_PriBorderStyle
};
var priori_style_border_PriBorderType = $hxEnums["priori.style.border.PriBorderType"] = { __ename__:true,__constructs__:null
	,SOLID: {_hx_name:"SOLID",_hx_index:0,__enum__:"priori.style.border.PriBorderType",toString:$estr}
	,DOTTED: {_hx_name:"DOTTED",_hx_index:1,__enum__:"priori.style.border.PriBorderType",toString:$estr}
	,DASHED: {_hx_name:"DASHED",_hx_index:2,__enum__:"priori.style.border.PriBorderType",toString:$estr}
};
priori_style_border_PriBorderType.__constructs__ = [priori_style_border_PriBorderType.SOLID,priori_style_border_PriBorderType.DOTTED,priori_style_border_PriBorderType.DASHED];
var priori_style_filter_PriFilterStyle = function() {
	this.blur = 0;
	this.brightness = 1;
	this.contrast = 1;
	this.grayscale = 0;
	this.hue = 0;
};
priori_style_filter_PriFilterStyle.__name__ = "priori.style.filter.PriFilterStyle";
priori_style_filter_PriFilterStyle.prototype = {
	setBlur: function(value) {
		this.blur = value;
		return this;
	}
	,setBrightness: function(value) {
		this.brightness = value;
		return this;
	}
	,setContrast: function(value) {
		this.contrast = value;
		return this;
	}
	,setGrayscale: function(value) {
		this.grayscale = value;
		return this;
	}
	,setHue: function(value) {
		this.hue = value;
		return this;
	}
	,setShadow: function(value) {
		this.shadow = value;
		return this;
	}
	,toString: function() {
		var result = "";
		if(this.blur > 0) {
			result += "blur(" + this.blur + "px) ";
		}
		if(this.brightness != 1) {
			result += "brightness(" + this.brightness * 100 + "%) ";
		}
		if(this.contrast != 1) {
			result += "contrast(" + this.contrast * 100 + "%) ";
		}
		if(this.grayscale > 0) {
			result += "grayscale" + this.grayscale * 100 + "%) ";
		}
		if(this.hue != 0) {
			result += "hue-rotate(" + 360 * this.hue + "deg) ";
		}
		if(this.saturate > 0) {
			result += "saturate(" + this.saturate * 100 + "%) ";
		}
		if(this.shadow != null && this.shadow.length > 0) {
			var _g = 0;
			var _g1 = this.shadow.length;
			while(_g < _g1) {
				var i = _g++;
				result += "drop-shadow(";
				result += this.shadow[i].toString(2);
				result += ") ";
			}
		}
		return result;
	}
	,__class__: priori_style_filter_PriFilterStyle
};
var priori_style_font_PriFontStyle = function(color,family,weight,italic,variant,align,decoration) {
	if(color != null) {
		this.color = color;
	} else {
		this.color = priori_style_font_PriFontStyle.DEFAULT_COLOR;
	}
	if(family != null) {
		this.family = family;
	} else {
		this.family = priori_style_font_PriFontStyle.DEFAULT_FAMILY;
	}
	if(weight != null) {
		this.weight = weight;
	} else {
		this.weight = priori_style_font_PriFontStyle.DEFAULT_WEIGHT;
	}
	if(italic != null) {
		this.italic = italic;
	} else {
		this.italic = priori_style_font_PriFontStyle.DEFAULT_ITALIC;
	}
	if(variant != null) {
		this.variant = variant;
	} else {
		this.variant = priori_style_font_PriFontStyle.DEFAULT_VARIANT;
	}
	if(align != null) {
		this.align = align;
	} else {
		this.align = priori_style_font_PriFontStyle.DEFAULT_ALIGN;
	}
	if(decoration != null) {
		this.decoration = decoration;
	} else {
		this.decoration = priori_style_font_PriFontStyle.DEFAULT_DECORATION;
	}
};
priori_style_font_PriFontStyle.__name__ = "priori.style.font.PriFontStyle";
priori_style_font_PriFontStyle.getFontStyleObjectBase = function() {
	return { fontFamily : "", fontWeight : "", fontVariant : "", fontStyle : "", textAlign : "", color : "", textDecoration : ""};
};
priori_style_font_PriFontStyle.prototype = {
	clone: function() {
		return new priori_style_font_PriFontStyle(this.color,this.family,this.weight,this.italic,this.variant,this.align,this.decoration);
	}
	,setColor: function(color) {
		this.color = color;
		return this;
	}
	,setFamily: function(family) {
		this.family = family;
		return this;
	}
	,setWeight: function(weight) {
		this.weight = weight;
		return this;
	}
	,setItalic: function(italic) {
		this.italic = italic;
		return this;
	}
	,setVariant: function(variant) {
		this.variant = variant;
		return this;
	}
	,setAlign: function(align) {
		this.align = align;
		return this;
	}
	,setDecoration: function(decoration) {
		this.decoration = decoration;
		return this;
	}
	,getFontStyleObject: function() {
		var weight = "";
		var italic = "";
		var variant = "";
		var align = "";
		var family = this.family == null ? "" : this.family;
		var color = this.color == null ? "" : priori_geom_PriColor.toString(this.color);
		var decoration = "";
		if(this.weight != null) {
			weight = this.weight;
		}
		if(this.italic != null) {
			italic = this.italic;
		}
		if(this.variant != null) {
			variant = this.variant;
		}
		if(this.align != null) {
			align = this.align;
		}
		if(this.decoration != null) {
			decoration = this.decoration;
		}
		var styleData = priori_style_font_PriFontStyle.getFontStyleObjectBase();
		styleData.fontFamily = family;
		styleData.fontWeight = weight;
		styleData.fontStyle = italic;
		styleData.fontVariant = variant;
		styleData.textAlign = align;
		styleData.color = color;
		styleData.textDecoration = decoration;
		return styleData;
	}
	,toString: function() {
		return JSON.stringify(this.getFontStyleObject());
	}
	,__class__: priori_style_font_PriFontStyle
};
var priori_style_font_PriFontStyleAlign = {};
priori_style_font_PriFontStyleAlign.toString = function(this1) {
	return this1;
};
var priori_style_font_PriFontStyleDecoration = {};
priori_style_font_PriFontStyleDecoration.toString = function(this1) {
	return this1;
};
var priori_style_font_PriFontStyleItalic = {};
priori_style_font_PriFontStyleItalic.toString = function(this1) {
	return this1;
};
var priori_style_font_PriFontStyleVariant = {};
priori_style_font_PriFontStyleVariant.toString = function(this1) {
	return this1;
};
var priori_style_font_PriFontStyleWeight = {};
priori_style_font_PriFontStyleWeight.toString = function(this1) {
	return this1;
};
var priori_style_shadow_PriShadowStyle = function() {
	this.type = priori_style_shadow_PriShadowType.OUTLINE;
	this.opacity = 0.7;
	this.color = 0;
	this.spread = -5;
	this.blur = 30;
	this.verticalOffset = 8;
	this.horizontalOffset = 0;
};
priori_style_shadow_PriShadowStyle.__name__ = "priori.style.shadow.PriShadowStyle";
priori_style_shadow_PriShadowStyle.prototype = {
	setHorizontalOffset: function(value) {
		this.horizontalOffset = value;
		return this;
	}
	,setVerticalOffset: function(value) {
		this.verticalOffset = value;
		return this;
	}
	,setBlur: function(value) {
		this.blur = value;
		return this;
	}
	,setSpread: function(value) {
		this.spread = value;
		return this;
	}
	,setColor: function(value) {
		this.color = value;
		return this;
	}
	,setOpacity: function(value) {
		this.opacity = value;
		return this;
	}
	,setType: function(value) {
		this.type = value;
		return this;
	}
	,toString: function(mode) {
		if(mode == null) {
			mode = 0;
		}
		return this.horizontalOffset + "px " + (this.verticalOffset + "px ") + (this.blur + "px ") + (mode > 0 ? "" : this.spread + "px ") + ("rgba(" + (this.color >> 16 & 255) + "," + (this.color >> 8 & 255) + "," + (this.color >> 16 & 255) + "," + this.opacity + ")") + (mode > 0 ? "" : this.type == priori_style_shadow_PriShadowType.INSET ? "inset" : "");
	}
	,__class__: priori_style_shadow_PriShadowStyle
};
var priori_style_shadow_PriShadowType = $hxEnums["priori.style.shadow.PriShadowType"] = { __ename__:true,__constructs__:null
	,INSET: {_hx_name:"INSET",_hx_index:0,__enum__:"priori.style.shadow.PriShadowType",toString:$estr}
	,OUTLINE: {_hx_name:"OUTLINE",_hx_index:1,__enum__:"priori.style.shadow.PriShadowType",toString:$estr}
};
priori_style_shadow_PriShadowType.__constructs__ = [priori_style_shadow_PriShadowType.INSET,priori_style_shadow_PriShadowType.OUTLINE];
var priori_system_PriDeviceSystem = $hxEnums["priori.system.PriDeviceSystem"] = { __ename__:true,__constructs__:null
	,WINDOWS: {_hx_name:"WINDOWS",_hx_index:0,__enum__:"priori.system.PriDeviceSystem",toString:$estr}
	,WINDOWSMOBILE: {_hx_name:"WINDOWSMOBILE",_hx_index:1,__enum__:"priori.system.PriDeviceSystem",toString:$estr}
	,MAC: {_hx_name:"MAC",_hx_index:2,__enum__:"priori.system.PriDeviceSystem",toString:$estr}
	,LINUX: {_hx_name:"LINUX",_hx_index:3,__enum__:"priori.system.PriDeviceSystem",toString:$estr}
	,IOS: {_hx_name:"IOS",_hx_index:4,__enum__:"priori.system.PriDeviceSystem",toString:$estr}
	,ANDROID: {_hx_name:"ANDROID",_hx_index:5,__enum__:"priori.system.PriDeviceSystem",toString:$estr}
	,BLACKBERRY: {_hx_name:"BLACKBERRY",_hx_index:6,__enum__:"priori.system.PriDeviceSystem",toString:$estr}
	,OPERAMINI: {_hx_name:"OPERAMINI",_hx_index:7,__enum__:"priori.system.PriDeviceSystem",toString:$estr}
	,UNKNOW: {_hx_name:"UNKNOW",_hx_index:8,__enum__:"priori.system.PriDeviceSystem",toString:$estr}
};
priori_system_PriDeviceSystem.__constructs__ = [priori_system_PriDeviceSystem.WINDOWS,priori_system_PriDeviceSystem.WINDOWSMOBILE,priori_system_PriDeviceSystem.MAC,priori_system_PriDeviceSystem.LINUX,priori_system_PriDeviceSystem.IOS,priori_system_PriDeviceSystem.ANDROID,priori_system_PriDeviceSystem.BLACKBERRY,priori_system_PriDeviceSystem.OPERAMINI,priori_system_PriDeviceSystem.UNKNOW];
var priori_view_PriFrame = function() {
	priori_view_PriDisplay.call(this);
	this.set_bgColor(16777215);
	this._iframe = window.document.createElement("iframe");
	this._iframe.onload = $bind(this,this.__onFrameLoad);
	this._iframe.onerror = $bind(this,this.__onError);
	this._iframe.style.width = "100%";
	this._iframe.style.height = "100%";
	this._iframe.style.border = "0px";
	this.dh.jselement.appendChild(this._iframe);
};
priori_view_PriFrame.__name__ = "priori.view.PriFrame";
priori_view_PriFrame.__super__ = priori_view_PriDisplay;
priori_view_PriFrame.prototype = $extend(priori_view_PriDisplay.prototype,{
	sendMessage: function(data) {
		if(this._iframe.contentWindow != null) {
			this._iframe.contentWindow.postMessage(data,"*");
		}
	}
	,setHtml: function(value) {
		this._iframe.srcdoc = value;
	}
	,frameDoc: function() {
		return this._iframe.contentDocument;
	}
	,get_url: function() {
		return this._iframe.src;
	}
	,set_url: function(value) {
		this._iframe.src = value;
		return value;
	}
	,__onFrameLoad: function() {
		this.dispatchEvent(new priori_event_PriEvent("prievent_base_complete"));
	}
	,__onError: function() {
		this.dispatchEvent(new priori_event_PriEvent("prievent_base_error"));
	}
	,kill: function() {
		this._iframe.onload = null;
		this._iframe.onerror = null;
		priori_view_PriDisplay.prototype.kill.call(this);
	}
	,__class__: priori_view_PriFrame
});
var priori_view_text_PriText = function() {
	this.dth = { text : "", html : "", fontSize : 14, autoSize : true, multiLine : false, selectable : false, ellipsis : true, editable : false, lineHeight : null, letterSpace : null, textColor : null, fontFamily : null, weight : null, italic : null, variant : null, align : null, decoration : null};
	priori_view_PriDisplay.call(this);
	this.startBatchUpdate();
	this.set_clipping(true);
	this.dh.height = null;
	this.dh.width = null;
	this.endBatchUpdate();
};
priori_view_text_PriText.__name__ = "priori.view.text.PriText";
priori_view_text_PriText.__super__ = priori_view_PriDisplay;
priori_view_text_PriText.prototype = $extend(priori_view_PriDisplay.prototype,{
	get_lineHeight: function() {
		return this.dth.lineHeight;
	}
	,set_lineHeight: function(value) {
		this.dth.lineHeight = value;
		if(value == null) {
			this.dh.styles.remove("line-height");
		} else {
			this.dh.styles.set("line-height",value * 100 + "%");
		}
		this.__updateStyle();
		return value;
	}
	,get_text: function() {
		if(this.dth.editable || this.dth.text == null) {
			this.dth.text = this.dh.jselement.textContent;
		}
		return this.dth.text;
	}
	,set_text: function(value) {
		if(this.dth.text != value) {
			this.dth.text = value;
			this.dth.html = null;
			this.dh.jselement.innerText = value;
		}
		return value;
	}
	,get_html: function() {
		if(this.dth.editable || this.dth.html == null) {
			this.dth.html = this.dh.jselement.innerHTML;
		}
		return this.dth.html;
	}
	,set_html: function(value) {
		if(this.dth.html != value) {
			this.dth.html = value;
			this.dth.text = null;
			this.dh.jselement.innerHTML = value;
		}
		return value;
	}
	,get_letterSpace: function() {
		if(this.dth.letterSpace == null) {
			return 0;
		} else {
			return this.dth.letterSpace;
		}
	}
	,set_letterSpace: function(value) {
		var v = value == 0 ? null : value;
		if(v == this.dth.letterSpace) {
			return value;
		}
		if(v == null) {
			this.dh.styles.remove("letter-spacing");
		} else {
			this.dh.styles.set("letter-spacing",v + "px");
		}
		this.__updateStyle();
		return value;
	}
	,set_fontStyle: function(value) {
		this.fontStyle = value;
		if(value == null) {
			this.dth.textColor = null;
			this.dth.fontFamily = null;
			this.dth.weight = null;
			this.dth.italic = null;
			this.dth.align = null;
			this.dth.decoration = null;
			this.dth.variant = null;
			helper_browser_StyleHelper.applyFontStyle(this.dh.styles,null);
		} else {
			this.dth.fontFamily = value.family;
			this.dth.weight = value.weight;
			this.dth.italic = value.italic;
			this.dth.align = value.align;
			this.dth.textColor = value.color;
			this.dth.decoration = value.decoration;
			this.dth.variant = value.variant;
			helper_browser_StyleHelper.applyFontStyle(this.dh.styles,value);
		}
		this.__updateStyle();
		return value;
	}
	,get_textColor: function() {
		return this.dth.textColor;
	}
	,set_textColor: function(value) {
		if(this.dth.textColor == value) {
			return value;
		}
		this.dth.textColor = value;
		if(value == null) {
			this.dh.styles.remove("color");
		} else {
			this.dh.styles.set("color",priori_geom_PriColor.toString(value));
		}
		this.__updateStyle();
		return value;
	}
	,get_fontFamily: function() {
		return this.dth.fontFamily;
	}
	,set_fontFamily: function(value) {
		if(this.dth.fontFamily == value) {
			return value;
		}
		this.dth.fontFamily = value;
		if(value == null) {
			this.dh.styles.remove("font-family");
		} else {
			this.dh.styles.set("font-family",value);
		}
		this.__updateStyle();
		return value;
	}
	,get_weight: function() {
		return this.dth.weight;
	}
	,set_weight: function(value) {
		if(this.dth.weight == value) {
			return value;
		}
		this.dth.weight = value;
		if(value == null) {
			this.dh.styles.remove("font-weight");
		} else {
			this.dh.styles.set("font-weight",value);
		}
		this.__updateStyle();
		return value;
	}
	,get_italic: function() {
		return this.dth.italic;
	}
	,set_italic: function(value) {
		if(this.dth.italic == value) {
			return value;
		}
		this.dth.italic = value;
		if(value == null) {
			this.dh.styles.remove("font-style");
		} else {
			this.dh.styles.set("font-style",value);
		}
		this.__updateStyle();
		return value;
	}
	,get_variant: function() {
		return this.dth.variant;
	}
	,set_variant: function(value) {
		if(this.dth.variant == value) {
			return value;
		}
		this.dth.variant = value;
		if(value == null) {
			this.dh.styles.remove("font-style");
			this.dh.styles.remove("text-transform");
		} else if(value == "all-caps") {
			this.dh.styles.set("text-transform","uppercase");
			this.dh.styles.remove("font-variant");
		} else {
			this.dh.styles.remove("text-transform");
			this.dh.styles.set("font-variant",value);
		}
		this.__updateStyle();
		return value;
	}
	,get_align: function() {
		return this.dth.align;
	}
	,set_align: function(value) {
		if(this.dth.align == value) {
			return value;
		}
		this.dth.align = value;
		if(value == null) {
			this.dh.styles.remove("text-align");
		} else {
			this.dh.styles.set("text-align",value);
		}
		this.__updateStyle();
		return value;
	}
	,get_decoration: function() {
		return this.dth.decoration;
	}
	,set_decoration: function(value) {
		if(this.dth.decoration == value) {
			return value;
		}
		this.dth.decoration = value;
		if(value == null) {
			this.dh.styles.remove("text-decoration");
		} else {
			this.dh.styles.set("text-decoration",value);
		}
		this.__updateStyle();
		return value;
	}
	,get_fontSize: function() {
		return this.dth.fontSize;
	}
	,set_fontSize: function(value) {
		if(this.dth.fontSize != value) {
			if(value == null) {
				this.dth.fontSize = 14;
				this.dh.styles.set("font-size","" + 14 + "px");
			} else {
				this.dth.fontSize = value;
				this.dh.styles.set("font-size",(value | 0) + "px");
			}
			this.__updateStyle();
		}
		return value;
	}
	,get_autoSize: function() {
		return this.dth.autoSize;
	}
	,set_autoSize: function(value) {
		if(this.dth.autoSize != value) {
			this.dth.autoSize = value;
			if(!this.dth.multiLine) {
				priori_view_PriDisplay.prototype.set_width.call(this,null);
			}
			if(this.dth.autoSize) {
				priori_view_PriDisplay.prototype.set_height.call(this,null);
			}
		}
		return value;
	}
	,get_ellipsis: function() {
		return this.dth.ellipsis;
	}
	,set_ellipsis: function(value) {
		if(this.dth.ellipsis != value) {
			this.dth.ellipsis = value;
			if(this.dth.ellipsis) {
				this.dh.styles.set("text-overflow","ellipsis");
			} else {
				this.dh.styles.remove("text-overflow");
			}
			this.__updateStyle();
		}
		return value;
	}
	,get_multiLine: function() {
		return this.dth.multiLine;
	}
	,set_multiLine: function(value) {
		if(this.dth.multiLine != value) {
			this.dth.multiLine = value;
			if(value) {
				this.dh.styles.remove("white-space");
			} else {
				this.dh.styles.set("white-space","nowrap");
			}
			if(value == false && this.dth.autoSize == true) {
				priori_view_PriDisplay.prototype.set_width.call(this,null);
			}
			this.__updateStyle();
		}
		return value;
	}
	,get_editable: function() {
		return this.dth.editable;
	}
	,set_editable: function(value) {
		if(this.dth.editable != value) {
			this.dth.editable = value;
			if(value) {
				this.dh.jselement.setAttribute("contentEditable","true");
				if(priori_system_PriDevice.browser() == priori_system_PriDeviceBrowser.MSIE) {
					this.dh.jselement.onkeydown = $bind(this,this.___onchange);
					this.dh.jselement.onkeyup = $bind(this,this.___onchange);
					this.dh.jselement.onpaste = $bind(this,this.___onchange);
				} else {
					this.dh.jselement.oninput = $bind(this,this.___onchange);
				}
			} else {
				this.dh.jselement.removeAttribute("contentEditable");
				this.dh.jselement.oninput = null;
				this.dh.jselement.onkeydown = null;
				this.dh.jselement.onkeyup = null;
				this.dh.jselement.onpaste = null;
			}
			if(this.dth.selectable || this.dth.editable) {
				this.__setSelectableField();
			} else {
				this.__setNotSelectableField();
			}
		}
		return value;
	}
	,___onchange: function() {
		this.dth.text = null;
		this.dth.html = null;
		this.dispatchEvent(new priori_event_PriEvent("prievent_base_change"));
	}
	,get_selectable: function() {
		return this.dth.selectable;
	}
	,set_selectable: function(value) {
		if(this.dth.selectable != value) {
			this.dth.selectable = value;
			if(this.dth.selectable || this.dth.editable) {
				this.__setSelectableField();
			} else {
				this.__setNotSelectableField();
			}
		}
		return value;
	}
	,__setSelectableField: function() {
		this.dh.styles.set("-webkit-touch-callout","default");
		this.dh.styles.set("-webkit-user-select","text");
		this.dh.styles.set("-khtml-user-select","text");
		this.dh.styles.set("-moz-user-select","text");
		this.dh.styles.set("-ms-user-select","text");
		this.dh.styles.set("user-select","text");
		this.__updateStyle();
	}
	,__setNotSelectableField: function() {
		this.dh.styles.remove("-webkit-touch-callout");
		this.dh.styles.remove("-webkit-user-select");
		this.dh.styles.remove("-khtml-user-select");
		this.dh.styles.remove("-moz-user-select");
		this.dh.styles.remove("-ms-user-select");
		this.dh.styles.remove("user-select");
		this.__updateStyle();
	}
	,set_width: function(value) {
		if(this.dth.autoSize == false || this.dth.multiLine == true) {
			priori_view_PriDisplay.prototype.set_width.call(this,value);
		}
		return value;
	}
	,set_height: function(value) {
		if(this.dth.autoSize == false) {
			priori_view_PriDisplay.prototype.set_height.call(this,value);
		}
		return value;
	}
	,set_shadow: function(value) {
		this.shadow = value;
		var shadowString = "";
		if(value != null && value.length > 0) {
			var _g = 0;
			var _g1 = value.length;
			while(_g < _g1) {
				var i = _g++;
				if(i > 0) {
					shadowString += ",";
				}
				shadowString += value[i].toString(1);
			}
		}
		if(shadowString.length == 0) {
			this.dh.styles.remove("text-shadow");
		} else {
			this.dh.styles.set("text-shadow",shadowString);
		}
		this.__updateStyle();
		return value;
	}
	,createElement: function() {
		priori_view_PriDisplay.prototype.createElement.call(this);
		this.dh.styles.set("white-space","nowrap");
		this.dh.styles.set("font-size","" + 14 + "px");
		this.dh.styles.set("text-overflow","ellipsis");
		this.dh.styles.remove("width");
		this.dh.styles.remove("height");
		this.__updateStyle();
	}
	,kill: function() {
		this.dh.jselement.oninput = null;
		this.dh.jselement.onkeydown = null;
		this.dh.jselement.onkeyup = null;
		this.dh.jselement.onpaste = null;
		priori_view_PriDisplay.prototype.kill.call(this);
	}
	,__class__: priori_view_text_PriText
});
function $iterator(o) { if( o instanceof Array ) return function() { return new haxe_iterators_ArrayIterator(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
var typeofJQuery = typeof($);
if(typeofJQuery != "undefined" && $.fn != null) {
	$.fn.elements = function() {
		return new js_jquery_JqEltsIterator(this);
	};
}
var typeofJQuery = typeof($);
if(typeofJQuery != "undefined" && $.fn != null) {
	$.fn.iterator = function() {
		return new js_jquery_JqIterator(this);
	};
}
priori_view_PriDisplay.OUTER_DOM_SIZE_CACHE = new haxe_ds_StringMap();
priori_app_PriApp.SHIFT_IS_ACTIVE = false;
priori_app_PriApp.CTRL_IS_ACTIVE = false;
priori_app_PriApp.COMMAND_IS_ACTIVE = false;
priori_app_PriApp.ALT_IS_ACTIVE = false;
helper_browser_BrowserHandler.MIN_FLOAT_POINT = helper_browser_BrowserHandler.getMinFloat();
helper_display_DisplayHelperIgnition.INITIAL_FONT_SIZE = 14;
priori_event_PriEvent.ADD_ITEM = "prievent_base_add_item";
priori_event_PriEvent.ADDED = "prievent_base_addedToContainer";
priori_event_PriEvent.ADDED_TO_APP = "prievent_base_addedToApp";
priori_event_PriEvent.CANCEL = "prievent_base_cancel";
priori_event_PriEvent.CHANGE = "prievent_base_change";
priori_event_PriEvent.CLOSE = "prievent_base_close";
priori_event_PriEvent.COMPLETE = "prievent_base_complete";
priori_event_PriEvent.DELETE = "prievent_base_delete";
priori_event_PriEvent.DRAG = "prievent_base_drag";
priori_event_PriEvent.DRAG_START = "prievent_base_drag_start";
priori_event_PriEvent.DRAG_STOP = "prievent_base_drag_stop";
priori_event_PriEvent.ERROR = "prievent_base_error";
priori_event_PriEvent.OK = "prievent_base_ok";
priori_event_PriEvent.OPEN = "prievent_base_open";
priori_event_PriEvent.PRESS_ENTER = "prievent_base_pressenter";
priori_event_PriEvent.RESIZE = "prievent_base_resize";
priori_event_PriEvent.REMOVED = "prievent_base_removedFromContainer";
priori_event_PriEvent.REMOVE_ITEM = "prievent_base_remove_item";
priori_event_PriEvent.REMOVED_FROM_APP = "prievent_base_removedFromApp";
priori_event_PriEvent.SAVE = "prievent_base_save";
priori_event_PriEvent.START = "prievent_base_start";
priori_event_PriEvent.SCROLL = "prievent_base_scroll";
priori_event_PriEvent.STOP = "prievent_base_stop";
priori_event_PriEvent.TICK = "prievent_base_tick";
priori_event_PriEvent.UPDATE = "prievent_base_update";
priori_event_PriEvent.PROGRESS = "prievent_base_progress";
priori_assets_AssetManagerEvent.ASSET_COMPLETE = "AssetManagerComplete";
priori_assets_AssetManagerEvent.ASSET_ERROR = "AssetManagerError";
priori_assets_AssetManagerEvent.ASSET_PROGRESS = "AssetManagerProgress";
priori_event_PriFocusEvent.FOCUS_IN = "focusin";
priori_event_PriFocusEvent.FOCUS_OUT = "focusout";
priori_event_PriKeyboardEvent.KEY_DOWN = "keydown";
priori_event_PriKeyboardEvent.KEY_UP = "keyup";
priori_event_PriMouseEvent.MOUSE_OVER = "mouseenter";
priori_event_PriMouseEvent.MOUSE_OUT = "mouseleave";
priori_event_PriMouseEvent.MOUSE_MOVE = "mousemove";
priori_event_PriTapEvent.TAP = "click";
priori_event_PriTapEvent.TAP_DOWN = "mousedown";
priori_event_PriTapEvent.TAP_UP = "mouseup";
priori_event_PriTapEvent.TOUCH_DOWN = "touchdown";
priori_event_PriTapEvent.TOUCH_UP = "touchup";
priori_event_PriTapEvent.TOUCH_MOVE = "touchmove";
priori_style_font_PriFontStyle.DEFAULT_COLOR = 0;
priori_style_font_PriFontStyle.DEFAULT_FAMILY = "Arial, Helvetica, sans-serif";
priori_style_font_PriFontStyleAlign.LEFT = "left";
priori_style_font_PriFontStyleAlign.CENTER = "center";
priori_style_font_PriFontStyleAlign.RIGHT = "right";
priori_style_font_PriFontStyleDecoration.NONE = "none";
priori_style_font_PriFontStyleDecoration.UNDERLINE = "underline";
priori_style_font_PriFontStyleDecoration.OVERLINE = "overline";
priori_style_font_PriFontStyleDecoration.LINE_THROUGH = "line-through";
priori_style_font_PriFontStyleItalic.NORMAL = "normal";
priori_style_font_PriFontStyleItalic.ITALIC = "italic";
priori_style_font_PriFontStyleItalic.OBLIQUE = "oblique";
priori_style_font_PriFontStyleVariant.NORMAL = "normal";
priori_style_font_PriFontStyleVariant.SMALL_CAPS = "small-caps";
priori_style_font_PriFontStyleVariant.ALL_CAPS = "all-caps";
priori_style_font_PriFontStyleWeight.NORMAL = "normal";
priori_style_font_PriFontStyleWeight.BOLD = "bold";
priori_style_font_PriFontStyleWeight.BOLDER = "bolder";
priori_style_font_PriFontStyleWeight.LIGHTER = "lighter";
priori_style_font_PriFontStyleWeight.THICK100 = "100";
priori_style_font_PriFontStyleWeight.THICK200 = "200";
priori_style_font_PriFontStyleWeight.THICK300 = "300";
priori_style_font_PriFontStyleWeight.THICK400 = "400";
priori_style_font_PriFontStyleWeight.THICK500 = "500";
priori_style_font_PriFontStyleWeight.THICK600 = "600";
priori_style_font_PriFontStyleWeight.THICK700 = "700";
priori_style_font_PriFontStyleWeight.THICK800 = "800";
priori_style_font_PriFontStyleWeight.THICK900 = "900";
Priori_$auto_$main_$builder.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=priori.js.map